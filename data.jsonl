{"input_ids": "give me the list of infrastructurecg names and servicecg name where infrastructurecg is like 'BDG'", "labels": "SELECT oi.name, os.name FROM oct_infrastructurecg AS oi, oct_infrastructurecg_b AS oib, oct_servicecg AS os WHERE oi.name LIKE '%BDG%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name LIKE '%InfrastructureCGToChildServiceCGs' AND oib.target_object_id = os.object_inst_id"}
{"input_ids": "Give me the VPN connection report", "labels": "CREATE OR REPLACE VIEW public.vpn_connection_details AS SELECT DISTINCT vpn.name AS ipvpn_name, vpn.service_definition, vpn.status AS ipvpn_status, vpnscon.name AS vpnscgcon_name, li.name AS liname, li.ce_vlan_id, ip.name AS ip, ipr.ip_range_start, ipr.ip_range_cidr_mask, ni.name AS ni_name FROM install.oct_ipvpn vpn LEFT JOIN install.oct_ipvpn_b vpnb ON vpn.object_inst_id = vpnb.owning_object_id AND vpnb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.IPVPNToServiceCGs'::text LEFT JOIN install.oct_servicecg vpnscon ON vpnb.target_object_id = vpnscon.object_inst_id LEFT JOIN install.oct_servicecg_b scgcli ON vpnscon.object_inst_id = scgcli.owning_object_id AND scgcli.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.ServiceCGToConnectionLogicalInterfaces'::text LEFT JOIN install.oct_logicalinterface li ON scgcli.target_object_id = li.object_inst_id LEFT JOIN install.oct_logicalinterface_b liip ON li.object_inst_id = liip.owning_object_id AND liip.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.ManagedObjectToAssignedIPAddress'::text LEFT JOIN install.ipm_ipaddress ip ON liip.target_object_id = ip.object_inst_id LEFT JOIN install.ipm_ipaddress_b ipb ON ip.object_inst_id = ipb.owning_object_id AND ipb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text LEFT JOIN install.ipm_iprange ipr ON ipb.target_object_id = ipr.object_inst_id LEFT JOIN install.oct_logicalinterface_b lini ON li.object_inst_id = lini.owning_object_id AND lini.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.LogicalInterfaceToNetworkInterfaces'::text LEFT JOIN install.oct_networkinterface ni ON lini.target_object_id = ni.object_inst_id WHERE vpnscon.type::text = 'Connection'::text;"}
{"input_ids": "Give me report of AN to RAN", "labels": "SELECT t1.ne_name AS an_name, t1.hostname AS an_hostname, t2.ne_name AS radio_node_name, t2.hostname AS radio_node_hostname, t1.link_status, t1.ni_name AS ni_name_a, t1.ni_speed AS bw_of_ni_a, t2.ni_name AS ni_name_z, t2.ni_speed AS bw_of_ni_z, t1.mplscloud AS mpls_ring_name FROM ( SELECT es.link_name, es.ne_name, es.hostname, es.link_status, es.ni_name, es.ni_speed, es.mplscloud FROM element_link_details es WHERE es.ne_role::text = 'AN'::text) t1, ( SELECT es.link_name, es.ne_name, es.hostname, es.link_status, es.ni_name, es.ni_speed, es.mplscloud FROM element_link_details es WHERE es.ne_role::text = ANY (ARRAY['RAN'::character varying, 'BBU'::character varying]::text[])) t2 WHERE t1.link_name::text = t2.link_name::text;"}
{"input_ids": "Give me the element link details", "labels": "SELECT DISTINCT lnk.object_inst_id AS link_id, lnk.name AS link_name, lnk.role AS link_role, lnk.status AS link_status, lnk.in_service_date AS link_inservice_date, lnk.scheduled_date AS link_scheduled_date, to_char(nvl(lnk.in_service_date::timestamp with time zone, lnk.scheduled_date::timestamp with time zone), 'MON-YYYY'::text) AS month_year, 'ni'::text || row_number() OVER (PARTITION BY lnk.object_inst_id, lnk.name, lnk.role, lnk.status, lnk.in_service_date, lnk.scheduled_date)::text AS ni_number, ni.name AS ni_name, ni.type AS ni_type, ni.sub_type AS ni_sub_type, ni.speed AS ni_speed, ip.name AS ip, ipr.ip_range_start, ipr.ip_range_cidr_mask, fd.name AS ne_name, nehn.string_value AS hostname, fd.role AS ne_role, mc.name AS mplscloud, pmc.name AS parent_mplscloud FROM oct_infrastructurecg lnk CROSS JOIN oct_infrastructurecg_b lnkb CROSS JOIN oct_networkinterface ni LEFT JOIN oct_networkinterface_b niip ON ni.object_inst_id = niip.owning_object_id AND niip.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.ManagedObjectToAssignedIPAddress'::text LEFT JOIN ipm_ipaddress ip ON niip.target_object_id = ip.object_inst_id LEFT JOIN ipm_ipaddress_b ipb ON ip.object_inst_id = ipb.owning_object_id AND ipb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text LEFT JOIN ipm_iprange ipr ON ipb.target_object_id = ipr.object_inst_id LEFT JOIN oct_networkinterface_b nib ON ni.object_inst_id = nib.owning_object_id AND nib.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs'::text LEFT JOIN oct_infrastructurecg fd ON nib.target_object_id = fd.object_inst_id LEFT JOIN oct_infrastructurecg_a nehn ON fd.object_inst_id = nehn.owning_object_id AND nehn.attribute_definition_id = (( SELECT dyn_attr_definition.attribute_id FROM dyn_attr_definition WHERE dyn_attr_definition.group_id = (( SELECT dyn_attr_group.group_id FROM dyn_attr_group WHERE dyn_attr_group.group_name::text = 'networkElementDefinition'::text)) AND dyn_attr_definition.attribute_name::text = 'hostname'::text)) LEFT JOIN oct_infrastructurecg_b neb ON fd.object_inst_id = neb.owning_object_id AND neb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToMplsCloud'::text LEFT JOIN oct_mplscloud mc ON neb.target_object_id = mc.object_inst_id LEFT JOIN oct_mplscloud_b mcb ON mc.object_inst_id = mcb.owning_object_id AND mcb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.MPLSCloudToParentMplsCloud'::text LEFT JOIN oct_mplscloud pmc ON mcb.target_object_id = pmc.object_inst_id WHERE lnk.type::text = 'Link'::text AND (lnk.role::text = ANY (ARRAY['Bundle'::character varying, 'Singleton'::character varying]::text[])) AND lnk.object_inst_id = lnkb.owning_object_id AND lnkb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces'::text AND lnkb.target_object_id = ni.object_inst_id;"}
{"input_ids": "give me the names of ICGS and their loopback interfaces and logical interfaces which are at site 'L.2001'", "labels": "select oi.name, oni.name, oni.type, os.name from oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_networkinterface oni ,oct_infrastructureCG_b oib1, oci_site os where oi.name like '%AMS36267-SEN1-2%' and oni.type = 'Loopback' and oi.object_inst_id = oib.owning_object_id and oib.binding_name = '%InfrastructureCGToFlowDomainNetworkInterfaces%' and oib.target_object_id = oni.object_inst_id and oi.object_inst_id = oib1.owning_object_id and oib1.binding_name = '%InfrastructureCGToSites%' and oib1.target_object_id = os.site_inst_id and os.name like '%36267%'"}
{"input_ids": "Give me list of ICGs", "labels": "WITH infrastructure_cg_data AS ( SELECT 'object_inst_id', 'name' FROM 'eaiuser_oct_infrastructurecg' ) SELECT name FROM infrastructure_cg_data"}
{"input_ids": "give me list of hostnames of all network interfaces", "labels": "SELECT hostname FROM eaiuser_oct_networkinterface"}
{"input_ids": "Find ICGs linked to SCGs (Service Configuration Groups)", "labels": "SELECT icg.*, scg.* FROM eaiuser.oct_infrastructurecg icg JOIN eaiuser.oct_infrastructurecg_b icg_b ON icg.object_inst_id = icg_b.owning_object_id JOIN eaiuser.oct_servicecg scg ON icg_b.target_object_id = scg.object_inst_id WHERE icg_b.binding_name LIKE '%InfrastructureCGToChildServiceCGs%';"}
{"input_ids": "Find ICGs linked to VRFs", "labels": "SELECT icg.*, vrf.* FROM eaiuser.oct_infrastructurecg icg JOIN eaiuser.oct_infrastructurecg_b icg_b ON icg.object_inst_id = icg_b.owning_object_id JOIN eaiuser.oct_vrf vrf ON icg_b.target_object_id = vrf.object_inst_id WHERE icg_b.binding_name LIKE '%InfrastructureCGToVrfs%';"}
{"input_ids": "Get me duplicate ipaddress report", "labels": "SELECT tbl2.ip_id, tbl2.ip_address AS ipadress, tbl2.ip_status AS ipstatus, tbl2.ipnetwork_name AS ipnetwork, tbl2.project_name AS project, tbl2.project_status AS projectstaus, tbl2.due_date AS duedate, tbl2.last_modified_on AS lastmodifiedon, tbl2.wo_name AS workorder, tbl2.user_name AS userid, tbl2.full_name AS fullname, tbl2.email_address AS emailaddress FROM ( SELECT tabl2.ip_id, tabl2.ip_address, tabl2.ipnetwork_name, tabl2.ip_status, tabl2.project_name, tabl2.project_status, tabl2.due_date, tabl2.last_modified_on, tabl2.wo_name, tabl2.user_name, us.full_name, us.email_address FROM ( SELECT tbl1.ip_id, tbl1.ip_address, tbl1.ipnetwork_name, tbl1.ip_status, op.name AS project_name, op.state AS project_status, op.due_date, op.last_modified_on, ow.name AS wo_name, ot.user_name FROM ( SELECT ia1.object_inst_id AS ip_id, tbl.ip_address, tbl.ipnetwork_name, ia1.status AS ip_status FROM ( SELECT tabl.ip AS ip_address, tabl.ipnetwork_name FROM ( SELECT iia.name AS ip, iir.ip_range_start AS iprange_start, iir.ip_range_end AS iprange_end, iir.ip_range_cidr_mask AS cidr_mask, ii.name AS ipnetwork_name, count(iia.name) AS ip_count FROM ipm_ipaddress iia CROSS JOIN ipm_ipaddress_b iib CROSS JOIN ipm_iprange_b iirb LEFT JOIN ipm_iprange iir ON iib.target_object_id = iir.object_inst_id LEFT JOIN ipm_ipnetwork ii ON iirb.target_object_id = ii.object_inst_id WHERE iia.object_inst_id = iib.owning_object_id AND iib.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text AND iir.object_inst_id = iirb.owning_object_id AND iirb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPRangeToIpNetwork'::text GROUP BY iia.name, iir.ip_range_start, iir.ip_range_end, iir.ip_range_cidr_mask, ii.name HAVING count(iia.name) > 1) tabl) tbl, ipm_ipaddress ia1 WHERE tbl.ip_address::text = ia1.name::text) tbl1 CROSS JOIN ipm_ipaddress_b iib1 CROSS JOIN ocp_project_b opb CROSS JOIN octm_workorder_b owb LEFT JOIN ocp_project op ON iib1.target_object_id = op.project_inst_id LEFT JOIN octm_workorder ow ON opb.target_object_id = ow.wo_inst_id LEFT JOIN octm_task ot ON owb.target_object_id = ot.task_inst_id WHERE tbl1.ip_id = iib1.owning_object_id AND iib1.binding_name::text = 'com.ericsson.granite.oss.core.projectmanagement.binding.ManagedObjectToProject'::text AND op.project_inst_id = opb.owning_object_id AND opb.binding_name::text = 'com.ericsson.granite.oss.core.cme.binding.ProjectToWorkOrder'::text AND ow.wo_inst_id = owb.owning_object_id AND owb.binding_name::text = 'com.ericsson.granite.oss.core.taskmanagement.binding.WorkOrderToTasks'::text AND ot.task_name::text ~~ 'Enter%'::text) tabl2, platform.users us WHERE tabl2.user_name::text = us.name::text) tbl2;"}
{"input_ids": "Which sites have the name 'L.36267', 'L.4310', 'L.4308', or 'L.2672'? Return the name and CLLI columns.", "labels": "SELECT name, clli FROM oci_site WHERE name IN ('L.36267', 'L.4310', 'L.4308', 'L.2672');"}
{"input_ids": "Return distinct ICG entries that have type='Flow Domain' and a hostname among the specified list, including last modified info.", "labels": "SELECT DISTINCT a.object_inst_id AS icg_id, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS Hostname, a.last_modified_on AS last_modified_on, TO_CHAR(a.last_modified_on, 'DD-MM-YYYY') AS lastModifiedOn FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1 WHERE a.type = 'Flow Domain' AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='hostname') AND _a.string_value IS NOT NULL AND _a.string_value IN ('asd3-bbn-dr1001', 'asd3-bbn-dr1002', 'arn1-bbn-dr1001', 'arn1-bbn-dr1002', 'ypg1-bbn-dr1005', 'ypg1-bbn-dr1006', 'rtm1-bbn-dr1001', 'rtm1-bbn-dr1002', 'AMS36267-DCER6-1', 'RTM2672-DCER6-1');"}
{"input_ids": "Select object_inst_id and name from oct_infrastructureCG where router_id matches the given hostnames.", "labels": "SELECT object_inst_id, name FROM oct_infrastructureCG WHERE router_id IN ('asd3-bbn-dr1001', 'asd3-bbn-dr1002', 'arn1-bbn-dr1001', 'arn1-bbn-dr1002', 'ypg1-bbn-dr1005', 'ypg1-bbn-dr1006', 'rtm1-bbn-dr1001', 'rtm1-bbn-dr1002', 'AMS36267-DCER6-1', 'RTM2672-DCER6-1');"}
{"input_ids": "Show ICG-to-NI relationships for specific ICG IDs (with FlowDomainNetworkInterfaces binding). Return ICG ID, ICG name, and NI name.", "labels": "SELECT icg.object_inst_id icg_id, icg.name icg_name, ni.name ni_name FROM oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkInterface ni WHERE icg.object_inst_id = icgb.owning_object_id(+) AND icgb.target_object_id = ni.object_inst_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToFlowDomainNetworkInterfaces' AND icg.object_inst_id IN ('197571', '197576', '197577', '197578', '197583', '197584', '197585', '197586');"}
{"input_ids": "Show ICG-to-NI relationships for the same ICG IDs but using either FlowDomainNetworkInterfaces or LinkNetworkInterfaces binding.", "labels": "SELECT icg.object_inst_id icg_id, icg.name icg_name, ni.name ni_name FROM oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkInterface ni WHERE icg.object_inst_id = icgb.owning_object_id(+) AND icgb.target_object_id = ni.object_inst_id(+) AND (icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToFlowDomainNetworkInterfaces' OR icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces') AND icg.object_inst_id IN ('197571', '197576', '197577', '197578', '197583', '197584', '197585', '197586');"}
{"input_ids": "Check NI and Routing Process associations for the specified ICG IDs.", "labels": "SELECT icg.object_inst_id icg_id, icg.name icg_name, ni.name ni_name, rp.name routing_process FROM oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_infrastructurecg_b icgb1, oct_networkInterface ni, oct_routingconfig rp WHERE icg.object_inst_id = icgb.owning_object_id(+) AND icg.object_inst_id = icgb1.owning_object_id(+) AND icgb.target_object_id = ni.object_inst_id(+) AND icgb1.target_object_id = rp.object_inst_id(+) AND (icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToFlowDomainNetworkInterfaces' OR icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces') AND icgb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND icg.object_inst_id IN ('197571', '197576', '197577', '197578', '197583', '197584', '197585', '197586');"}
{"input_ids": "Check which Routing Process is associated to the specified ICG IDs.", "labels": "SELECT icg.object_inst_id icg_id, icg.name icg_name, rp.name routing_process FROM oct_infrastructurecg icg, oct_infrastructurecg_b icgb1, oct_routingconfig rp WHERE icg.object_inst_id = icgb1.owning_object_id(+) AND icgb1.target_object_id = rp.object_inst_id(+) AND icgb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND icg.object_inst_id IN ('197571', '197576', '197577', '197578', '197583', '197584', '197585', '197586');"}
{"input_ids": "Count how many 'Out' ports exist by connector_type in oci_port.", "labels": "SELECT DISTINCT connector_type, COUNT(*) FROM oci_port WHERE name = 'Out' GROUP BY connector_type;"}
{"input_ids": "Retrieve NI and ICG naming details (prefix, site category, etc.) for Flow Domain ICGs at Network Locations.", "labels": "SELECT ni.object_inst_id ni_id, ni.name ni_name, SUBSTRING(ni.name, 0, POSITION('.' IN ni.name)) prefix_of_ni, a.object_inst_id icg_id, a.name AS icg_name, a.type AS icg_type, _a.string_value AS icg_hostname, b.target_object_id AS site_inst_id, s.name AS site_name, _s.string_value AS site_category FROM oct_networkInterface ni, oct_networkInterface_b nib, oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.target_object_id = a.object_inst_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.type = 'Flow Domain' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND a.object_inst_id = _a.owning_object_id(+) AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='hostname');"}
{"input_ids": "Find all BNG3 and BNG5 network elements whose Loopback1 interface has no IP address assigned.", "labels": "SELECT icg.name AS ne_name, icga.string_value AS ne_role, ni.name AS loopback1_ni, ip.name AS loopback1_ip FROM oct_infrastructurecg icg, oct_infrastructurecg_a icga, oct_infrastructurecg_b icgb, oct_networkInterface ni, oct_networkInterface_b nib, ipm_ipaddress ip WHERE icg.object_inst_id = icga.owning_object_id(+) AND icga.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND icga.string_value IN ('BNG3', 'BNG5') AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.target_object_id = ni.object_inst_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToFlowDomainNetworkInterfaces' AND ni.name LIKE '%Loopback1' AND ni.object_inst_id = nib.owning_object_id(+) AND nib.target_object_id = ip.object_inst_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.ipam.binding.ManagedObjectToAssignedIPAddress' AND ip.name IS NULL;"}
{"input_ids": "Select all columns from ond_provrequest where object_inst_id is 682622.", "labels": "SELECT * FROM ond_provrequest WHERE object_inst_id = 682622;"}
{"input_ids": "Select all columns from ocp_project where project_inst_id is 507482.", "labels": "SELECT * FROM ocp_project WHERE project_inst_id = 507482;"}
{"input_ids": "Get the structure of the ocp_project table: column names, data types, length, nullability, and default values.", "labels": "SELECT column_name, data_type, character_maximum_length, is_nullable, column_default FROM information_schema.columns WHERE table_name = 'ocp_project' AND table_schema = 'install';"}
{"input_ids": "List all cables on Network Location whose name starts with 'L.' (checking both A side and Z side) and return cable inst ID, cable name, type, and cable label.", "labels": "SELECT DISTINCT c.cable_inst_id AS cable_key, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE','FI','FC','TE','TC','TI','P') AND ca.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToASideSite' AND sa.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location' AND c.name LIKE 'L.%' UNION SELECT DISTINCT c.cable_inst_id, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE','FI','FC','TE','TC','TI','P') AND ca.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToZSideSite' AND sa.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location' AND c.name LIKE 'L.%';"}
{"input_ids": "List all active shelves located at 'Network Location' sites (discriminator = 'PersistedShelf', shelf category = 'Active') and return equip_inst_id, name, type, and location name.", "labels": "SELECT DISTINCT a.equip_inst_id, a.name, a.type, s.name AS location FROM oci_equipment a, oci_equipment_a _a, oci_equipment_b b, oci_site s, oci_site_a _s WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _a.attribute_definition_id=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND _a.string_value(+)='Active';"}
{"input_ids": "List passive equipment (outer containers) that are located at Network Location sites and do not have a parent container binding (discriminator = 'PersistedContainer', but not RA or FR). Return equip_inst_id, name, type, and location.", "labels": "SELECT DISTINCT a.equip_inst_id, a.name, a.type, s.name AS location FROM oci_equipment a, oci_equipment_b b, oci_equipment_b b1, oci_site s, oci_site_a _s WHERE a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedContainer' AND b1.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentContainer' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b1.binding_name IS NULL;"}
{"input_ids": "List all Flow Domain ICGs at Network Locations (for sequence number update). Return ICG ID, name, type, status, site ID, site name, and site category.", "labels": "SELECT a.object_inst_id AS icg_id, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, b.target_object_id AS site_inst_id, s.name AS site_name, _s.string_value AS site_category FROM oct_infrastructurecg a, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.type = 'Flow Domain' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites';"}
{"input_ids": "Return all active shelves at network locations along with associated ICG information. Include shelf key, name, type, model, shelf category, label, template name, network element role, sequence number, and mastered by; plus associated site information and ICG details (role, sequence number, and mastered by).", 
"labels": "SELECT DISTINCT a.equip_inst_id AS shelf_key, a.name AS shelf_name, a.type AS shelf_type, a.model AS shelf_model, _a.string_value AS shelf_category, _a1.string_value AS equipment_label, _t.name AS shelf_template_name, _a2.string_value AS shelf_nwele_role, _a3.integer_value AS shelf_sequence_number, _a4.string_value AS shelf_mastered_by, s.name AS asso_nw_location, _s.string_value AS asso_loc_category, icg.name AS asso_icg_name, icg.type AS asso_icg_type, icg.role AS asso_icg_role, _icga.string_value AS asso_icg_nwele_role, _icga1.integer_value AS asso_icg_seq_num, _icga2.string_value AS asso_icg_mastered_by FROM oci_equipment a, oci_equipment_a _a, oci_equipment_a _a1, oci_equipment_a _a2, oci_equipment_a _a3, oci_equipment_a _a4, oci_equipment_b b, oci_equipment_b b1, oci_equipment_b b2, oci_site s, oci_site_a _s, oct_infrastructurecg icg, oct_infrastructurecg_a _icga, oct_infrastructurecg_a _icga1, oct_infrastructurecg_a _icga2, oci_t_shelf _t WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = _a1.owning_object_id(+) AND a.equip_inst_id = _a2.owning_object_id(+) AND a.equip_inst_id = _a3.owning_object_id(+) AND a.equip_inst_id = _a4.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND a.equip_inst_id = b2.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND b1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = _icga.owning_object_id(+) AND icg.object_inst_id = _icga1.owning_object_id(+) AND icg.object_inst_id = _icga2.owning_object_id(+) AND b2.target_object_id = _t.template_inst_id(+) AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND b1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.EquipmentToInfrastructureCGs' AND b2.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.ShelfToTemplate' AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _a1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='Label') AND _a2.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _a3.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='SequenceNumber') AND _a4.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'MastershipInformation' AND da.attribute_name='MasteredBy') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _icga.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _icga1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalNEInformation' AND da.attribute_name='SequenceNumber') AND _icga2.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'MastershipInformation' AND da.attribute_name='MasteredBy') AND _s.string_value='Network Location' AND _a.string_value='Active';"}
{"input_ids": "List all outer containers located at network locations, returning the container key, name, type, label, and location name. Outer containers are those with no parent container binding.", 
"labels": "SELECT DISTINCT a.equip_inst_id AS container_key, a.name, a.type, _a.string_value AS container_label, s.name AS container_location FROM oci_equipment a, oci_equipment_a _a, oci_equipment_b b, oci_equipment_b b1, oci_site s, oci_site_a _s WHERE a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND a.equip_inst_id = _a.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedContainer' AND b1.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentContainer' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='Label') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND b1.binding_name IS NULL;"}
{"input_ids": "List all active shelves at network locations, including shelf label, key, location, and the associated ICG plus the ICG's associated MPLS cloud.", 
"labels": "SELECT DISTINCT a.equip_inst_id AS shelf_key, a.name, a.type, _a1.string_value AS shelf_label, _a.string_value AS shelf_category, s.name AS shelf_location, icg.name AS associated_icg, mc.name AS icg_asso_mplsCloud FROM oci_equipment a, oci_equipment_a _a, oci_equipment_a _a1, oci_equipment_b b, oci_equipment_b b1, oci_site s, oci_site_a _s, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_mplscloud mc WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = _a1.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND b1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.target_object_id = mc.object_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND b1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.EquipmentToInfrastructureCGs' AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToMplsCloud' AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _a1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='Label') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location';"}
{"input_ids": "List all cables of type FI, FE, FC, TI, TE, TC, or P at network locations, returning cable key, name, type, and label. Check both A side and Z side site bindings.", 
"labels": "SELECT DISTINCT c.cable_inst_id AS cable_key, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE', 'FI', 'FC', 'TE', 'TC', 'TI', 'P') AND ca.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToASideSite' AND sa.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location' UNION SELECT DISTINCT c.cable_inst_id, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE', 'FI', 'FC', 'TE', 'TC', 'TI', 'P') AND ca.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToZSideSite' AND sa.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location';"}
{"input_ids": "Show all Flow Domain ICGs at network locations so we can check if they do NOT start with 'XXX'. Return ICG ID, name, type, status, and site details.", 
"labels": "SELECT a.object_inst_id AS icg_id, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, b.target_object_id AS site_inst_id, s.name AS site_name, _s.string_value AS site_category FROM oct_infrastructurecg a, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.type = 'Flow Domain' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites';"}
{"input_ids": "Select outer containers at network locations whose names do not start with 'L.'. Return equip_inst_id, name, type, and location.", 
"labels": "SELECT DISTINCT a.equip_inst_id, a.name, a.type, s.name AS location FROM oci_equipment a, oci_equipment_b b, oci_equipment_b b1, oci_site s, oci_site_a _s WHERE a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedContainer' AND b1.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentContainer' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b1.binding_name IS NULL AND a.name NOT LIKE 'L.%';"}
{"input_ids": "Select all shelves with category 'Passive' at network locations whose name does not start with 'L.'. Return equipment ID, name, type, and site location.", "labels": "SELECT DISTINCT a.equip_inst_id, a.name, a.type, s.name AS location FROM oci_equipment a, oci_equipment_a _a, oci_equipment_b b, oci_site s, oci_site_a _s WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _s.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND _a.string_value='Passive' AND a.name NOT LIKE 'L.%';"}
{"input_ids": "Select all shelves with category 'Active' at network locations whose name does not start with 'L.'. Return equipment ID, name, type, and site location.", "labels": "SELECT DISTINCT a.equip_inst_id, a.name, a.type, s.name AS location FROM oci_equipment a, oci_equipment_a _a, oci_equipment_b b, oci_site s, oci_site_a _s WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _s.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND _a.string_value='Active' AND a.name NOT LIKE 'L.%';"}
{"input_ids": "Select all cables of types FE, FI, FC, TE, TI, TC, or P at network locations whose name does not start with 'L.'. Return cable inst ID, name, type, label.", "labels": "SELECT * FROM (SELECT DISTINCT c.cable_inst_id, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE', 'FI', 'FC', 'TE', 'TC', 'TI', 'P') AND ca.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToASideSite' AND sa.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location' UNION SELECT DISTINCT c.cable_inst_id, c.name, c.type, ca.string_value AS cable_label FROM oci_cable c, oci_cable_a ca, oci_cable_b cb, oci_site s, oci_site_a sa WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+) AND s.site_inst_id = sa.owning_object_id AND c.type IN ('FE', 'FI', 'FC', 'TE', 'TC', 'TI', 'P') AND ca.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='Label') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToZSideSite' AND sa.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND sa.string_value(+)='Network Location') qr WHERE qr.name NOT LIKE 'L.%';"}
{"input_ids": "Select all cables of types FE, FI, FC, TE, TI, TC, or P that are not anchored to any location (no A side site or no Z side site). Return cable inst ID, name, type, and potential site references.", "labels": "SELECT DISTINCT * FROM (SELECT c.cable_inst_id, c.name, c.type, s.name AS aSideSite, _s.string_value AS aSideCategory, s1.name AS zSideSite, _s1.string_value AS zSideCategory FROM oci_cable c, oci_cable_b cb, oci_cable_b cb1, oci_site s, oci_site s1, oci_site_a _s, oci_site_a _s1 WHERE c.cable_inst_id = cb.owning_object_id(+) AND c.cable_inst_id = cb1.owning_object_id(+) AND cb.target_object_id = s.site_inst_id(+ ) AND cb1.target_object_id = s1.site_inst_id(+ ) AND s.site_inst_id = _s.owning_object_id(+) AND s1.site_inst_id = _s1.owning_object_id(+) AND c.type IN ('FE', 'FI', 'FC', 'TE', 'TC', 'TI', 'P') AND cb.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToASideSite' AND cb1.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.AbstractCableToZSideSite' AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category')) qr"}
{"input_ids": "Check outer containers at network locations for sequence number consistency (container name vs. sequence number attribute). Return container key, name, type, location, and the sequence number from additionalInventoryInformation.", "labels": "SELECT DISTINCT a.equip_inst_id AS container_key, a.name, a.type, s.name AS container_location, _a.integer_value AS sequence_number FROM oci_equipment a, oci_equipment_a _a, oci_equipment_b b, oci_equipment_b b1, oci_site s, oci_site_a _s WHERE a.equip_inst_id = b.owning_object_id(+) AND a.equip_inst_id = b1.owning_object_id(+) AND a.equip_inst_id = _a.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedContainer' AND b1.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentContainer' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='SequenceNumber') AND _s.string_value = 'Network Location' AND b1.binding_name IS NULL;"}
{"input_ids": "Check passive shelves at network locations for sequence number consistency (shelf name vs. sequence number attribute). Return shelf key, name, type, location, and the sequence number.", "labels": "SELECT DISTINCT a.equip_inst_id AS shelf_key, a.name, a.type, s.name AS location, _a1.integer_value AS sequence_number FROM oci_equipment a, oci_equipment_a _a, oci_equipment_a _a1, oci_equipment_b b, oci_site s, oci_site_a _s WHERE a.equip_inst_id = _a.owning_object_id(+) AND a.equip_inst_id = _a1.owning_object_id(+) AND a.equip_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.discriminator = 'PersistedShelf' AND b.binding_name(+)='com.ericsson.granite.oss.core.physical.binding.EquipmentToParentSite' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'shelfCategoryInformation' AND da.attribute_name='Category') AND _a1.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalInventoryInformation' AND da.attribute_name='SequenceNumber') AND _s.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND _a.string_value='Passive';"}
{"input_ids": "Select all Flow Domain ICGs that are not associated to any site (associated_site IS NULL). Return ICG key, name, type, status, role, plus networkElementDefinition role, sequence number, site name, site category, and associated equipment if any.", "labels": "SELECT * FROM (SELECT a.object_inst_id AS icg_key, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS icg_nwele_role, _a1.integer_value AS icg_seq_num, s.name AS associated_site, _s.string_value AS site_category, e.name AS associated_equipment FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1, oct_infrastructurecg_b b, oct_infrastructurecg_b b1, oci_site s, oci_site_a _s, oci_equipment e WHERE a.type = 'Flow Domain' AND a.object_inst_id = b.owning_object_id(+) AND a.object_inst_id = b1.owning_object_id(+) AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id(+) AND b1.target_object_id = e.equip_inst_id(+) AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND b1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToEquipment' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _a1.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalNEInformation' AND da.attribute_name='SequenceNumber') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category')) qr WHERE qr.associated_site IS NULL;"}
{"input_ids": "Select all Flow Domain ICGs on a location whose location category is null (neither Network nor Customer). Return ICG key, name, type, status, role, network element definition role, sequence number, the associated site (if any), site category, and associated equipment name.", "labels": "SELECT * FROM (SELECT a.object_inst_id AS icg_key, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS icg_nwele_role, _a1.integer_value AS icg_seq_num, s.name AS associated_site, _s.string_value AS site_category, e.name AS associated_equipment FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1, oct_infrastructurecg_b b, oct_infrastructurecg_b b1, oci_site s, oci_site_a _s, oci_equipment e WHERE a.type = 'Flow Domain' AND a.object_inst_id = b.owning_object_id(+) AND a.object_inst_id = b1.owning_object_id(+) AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id(+) AND b1.target_object_id = e.equip_inst_id(+) AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND b1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToEquipment' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _a1.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalNEInformation' AND da.attribute_name='SequenceNumber') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category')) qr WHERE qr.associated_site IS NOT NULL AND qr.site_category IS NULL;"}
{"input_ids": "Select all Flow Domain ICGs at a network location which do not have a valid numeric sequence number. Return ICG key, name, type, status, role, network element definition role, sequence number, the associated site, site category, and any associated equipment.", "labels": "SELECT * FROM (SELECT a.object_inst_id AS icg_key, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS icg_nwele_role, _a1.integer_value AS icg_seq_num, s.name AS associated_site, _s.string_value AS site_category, e.name AS associated_equipment FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1, oct_infrastructurecg_b b, oct_infrastructurecg_b b1, oci_site s, oci_site_a _s, oci_equipment e WHERE a.type = 'Flow Domain' AND a.object_inst_id = b.owning_object_id(+) AND a.object_inst_id = b1.owning_object_id(+) AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id(+) AND b1.target_object_id = e.equip_inst_id(+) AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND b1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToEquipment' AND _a.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _a1.attribute_definition_id(+)=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'additionalNEInformation' AND da.attribute_name='SequenceNumber') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category')) qr WHERE qr.associated_site IS NOT NULL AND qr.site_category = 'Network Location';"}
{"input_ids": "List all ICG-FD name, hostnames, role, creation date for roles BN or AN updated in the last 48 hours, including site info if it is a Network Location.", "labels": "SELECT a.object_inst_id AS icg_id, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS Hostname, _a1.string_value AS NetworkElementRole, a.last_modified_on AS last_modified_on, TO_CHAR(a.last_modified_on, 'DD-MM-YYYY') AS lastModifiedOn, s.name AS associated_site, _s.string_value AS site_category FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE a.type = 'Flow Domain' AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id(+) AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='hostname') AND _a1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND _a1.string_value(+) IN ('AN','BN') AND a.last_modified_on >= NOW() - INTERVAL '48 HOURS';"}
{"input_ids": "Get current date, current date minus one, now(), now minus one, plus a sample literal date string from dual table (demo).", "labels": "SELECT current_date, current_date - 1 AS cdminus, NOW(), NOW() - 1 AS nowminus, '2021-08-07 12:54:33.738' AS lmd FROM dual;"}
{"input_ids": "Number of trails with more than one distinct ICG name, from a subselect referencing ICG Link NIs and ports, grouped by trail name.", "labels": "SELECT ta.trail_name, COUNT(DISTINCT ta.icg_name) FROM (SELECT DISTINCT t.name trail_name, icg.name icg_name, ni.name ni_name, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM install.occ_trail t, install.occ_trail_b tb, install.oct_infrastructurecg icg, install.oct_infrastructurecg_b icgb, install.oct_networkinterface ni, install.oct_networkinterface_b nib, install.oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, install.oci_port_b pb, install.occ_trail ct WHERE t.type = 'INFRA' AND t.object_inst_id = tb.owning_object_id AND tb.binding_name='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id AND icg.object_inst_id = icgb.owning_object_id AND icgb.binding_name='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id AND ni.object_inst_id = nib.owning_object_id AND nib.binding_name='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY trail_name) ta GROUP BY ta.trail_name HAVING COUNT(DISTINCT ta.icg_name) > 1;"}
{"input_ids": "Select all occ_trail rows where band_width = 'Optical'.", "labels": "SELECT * FROM occ_trail WHERE band_width = 'Optical';"}
{"input_ids": "Show optical trails with associated ports (if any). Return trail name, port name, and more via joins.", "labels": "SELECT t.name trail_name, t.band_width trail_bandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort';"}
{"input_ids": "Identify all optical trails that have no associated port elements.", "labels": "SELECT DISTINCT * FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr WHERE tr.trail_bindingName IS NULL;"}
{"input_ids": "Alternative approach to find all optical trails with no elements (port/pair/strand). Return rows from subselect where binding_name is null.", "labels": "SELECT * FROM (SELECT t.name trail_name, t.band_width trailBandWidth, tb.binding_name AS trail_bindingname FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.band_width = 'Optical' AND (tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort' OR tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToStrand' OR tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPair')) tr WHERE tr.trail_bindingname IS NULL;"}
{"input_ids": "Identify all optical trails that have exactly 2 port trail elements.", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trail_bandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name) = 2;"}
{"input_ids": "Identify all optical trails that have exactly 4 port trail elements.", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name) = 4;"}
{"input_ids": "Find optical trails that have 6 port elements or 1 port element (unusual counts).", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name)=6 OR COUNT(tr.element_port_name)=1;"}
{"input_ids": "Show all optical trails and the count of their path elements. Summarize by binding name = 'TrailToElementsOfTrail'.", "labels": "SELECT tr.trail_name, COUNT(tr.trail_bindingName) trail_element_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail') tr GROUP BY tr.trail_name, tr.trail_bindingName;"}
{"input_ids": "Fetch ODF ports with status OK, having a strand, but the cable's prewiring = 'YES'. Return port network_id, port hierarchy, etc.", "labels": "SELECT DISTINCT p.network_id AS network_id, pa.string_value AS port_hierarchy, p.status AS port_status, eq.name AS parent_shelf, s.name AS strand_name, c.name AS cable_name, ca.string_value AS cable_prewiring FROM oci_port p, oci_port_a pa, oci_port_b pb, oci_port_b pb1, oci_equipment eq, oci_strand s, oci_strand_b sb, oci_cable c, oci_cable_a ca WHERE p.status = 'OK' AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pa.attribute_definition_id=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalPortInformation' AND da.attribute_name='PortHierarchyInfo') AND pb.binding_name IN ('com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands','com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb1.target_object_id = eq.equip_inst_id(+) AND eq.type = 'ODF' AND pb.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND ca.attribute_definition_id=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='PreWiring') AND ca.string_value = 'YES';"}
{"input_ids": "Find all infra trails with zero port elements. Group by trail key, counting the path binding. Having count=0 means no elements found.", "labels": "SELECT tr.trail_key, tr.trail_name, COUNT(tr.element_binding) FROM (SELECT t.object_inst_id AS trail_key, t.name AS trail_name, tb.binding_name AS element_binding FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.type='INFRA' AND t.name NOT LIKE '%.TxRx' AND t.name NOT LIKE '%.RxTx' AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_key, tr.trail_name, tr.element_binding HAVING COUNT(tr.element_binding) = 0;"}
{"input_ids": "Fetch all INFRA trails and their element counts (TrailToElementsOfTrail). Useful before running a fix.", "labels": "SELECT tr.trail_key, tr.trail_name, COUNT(tr.element_binding) FROM (SELECT t.object_inst_id AS trail_key, t.name AS trail_name, tb.binding_name AS element_binding FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.type='INFRA' AND t.name NOT LIKE '%.TxRx' AND t.name NOT LIKE '%.RxTx' AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail') tr GROUP BY tr.trail_key, tr.trail_name, tr.element_binding;"}
{"input_ids": "Get all INFRA trails with their ICG Link, NIs, and the count of distinct ports per NI. Group by trail name, ICG, NI, and count the unique port names.", "labels": "SELECT ta.trail_name, ta.icg_name, ta.ni_name, COUNT(DISTINCT ta.port_name) FROM (SELECT DISTINCT t.name trail_name, icg.name icg_name, ni.name ni_name, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM install.occ_trail t, install.occ_trail_b tb, install.oct_infrastructurecg icg, install.oct_infrastructurecg_b icgb, install.oct_networkinterface ni, install.oct_networkinterface_b nib, install.oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, install.oci_port_b pb, install.occ_trail ct WHERE t.type = 'INFRA' AND t.object_inst_id = tb.owning_object_id AND tb.binding_name='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id AND icg.object_inst_id = icgb.owning_object_id AND icgb.binding_name='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id AND ni.object_inst_id = nib.owning_object_id AND nib.binding_name='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY trail_name) ta GROUP BY ta.trail_name, ta.icg_name, ta.ni_name ORDER BY ta.trail_name ASC;"}
{"input_ids": "List all ports with direction=null (no direction set). Return port basic data.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width FROM oci_port p WHERE p.direction IS NULL;"}
{"input_ids": "List all ports with direction=null including port hierarchy attribute. Return port basic data plus hierarchy info.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width, pa.string_value AS port_hierarchy FROM oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL;"}
{"input_ids": "List all ports with direction=null, joined to a parent shelf (if any), specifically ODF shelves. Return port details plus parent shelf name/type.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width, pa.string_value AS port_hierarchy, eq.name AS parent_shelf, eq.type AS shelf_type FROM oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'ODF' AND p.network_id IS NULL;"}
{"input_ids": "Report 1: All trails where equipment ports have more than 1 strand terminated. Must not include ODF ports, only real shelf or card equipment. Return the count of unique strands per port for each trail.", "labels": "SELECT po.port_name, po.network_id, po.port_hierarchy, COUNT(DISTINCT po.connected_strandKey) connected_strandKey, po.consuming_trail, po.icg_name, po.ni_name FROM (SELECT p.name port_name, p.network_id, pa.string_value port_hierarchy, pb2.target_object_id connected_strandKey, t.name consuming_trail, icg.name icg_name, ni.name ni_name FROM oci_port p, occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type <> 'ODF' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands')) po GROUP BY po.port_name, po.network_id, po.port_hierarchy, po.consuming_trail, po.icg_name, po.ni_name HAVING COUNT(DISTINCT po.connected_strandKey) > 1;"}
{"input_ids": "Report 2: All ODF ports in trail that have no connected strand. Return only those with direction=null and parent shelf = ODF. The result indicates un-terminated ODF ports in a trail.", "labels": "SELECT * FROM (SELECT t.name AS trail_name, t.object_inst_id AS trail_key, pb2.target_object_id AS connected_strand_key, p.name AS port_name, p.direction, p.port_inst_id AS port_key, p.network_id, p.band_width, pa.string_value AS port_hierarchy, eq.name AS parent_shelf, eq.type AS shelf_type FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND eq.type = 'ODF' AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands')) po WHERE trail_name IS NOT NULL AND connected_strand_key IS NULL;"}
{"input_ids": "Remote port scenario subscenario 1: BN1 ports with FE cable prewired='YES', check if the trail includes a remote CMPT port that has no further connection. Return the BN1 port/trail pairs where the remote port is unconnected.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, pb4.binding_name remote_port_conn FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1, oci_port_b pb4 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'YES' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT' AND p1.port_inst_id = pb4.owning_object_id(+) AND (pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) tr WHERE tr.remote_port_conn IS NULL;"}
{"input_ids": "Remote port scenario subscenario 2: BN1 ports with FE cable prewired='NO', check if the trail includes a remote CMPT port that has no further connection. Return those BN1 port/trail pairs where remote port is unconnected.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, pb4.binding_name remote_port_conn FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1, oci_port_b pb4 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'NO' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT' AND p1.port_inst_id = pb4.owning_object_id(+) AND (pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) tr WHERE tr.remote_port_conn IS NULL;"}
{"input_ids": "Remote port scenario subscenario 3: BN1 ports with FE cable prewired='YES' but no remote port at all. Return those BN1 port/trail combos missing any CMPT port side.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, p1.name AS remote_port FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'YES' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT') tr WHERE tr.remote_port IS NULL;"}
{"input_ids": "Find ports named '%ACCESS%' on a CMPT shelf that is used by a trail. The trail's ICG Link also has an NI named '%ACCESS%', but that NI is not bound to these ports. We want to fix those missing associations so the ACCESS port belongs to the ACCESS NI.", "labels": "SELECT po.port_name, po.network_id, po.port_hierarchy, po.consuming_trail, po.icg_name, po.ni_name, po.ni_to_access_portid FROM (SELECT p.name port_name, p.network_id, pa.string_value port_hierarchy, t.name consuming_trail, icg.name icg_name, ni.name ni_name, nib.target_object_id ni_to_access_portid FROM oci_port p, occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'CMPT' AND p.name LIKE '%ACCESS%' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.name LIKE '%ACCESS%' AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts') po WHERE po.ni_to_access_portid IS NULL;"}
{"input_ids": "Report for DWDM remote ports on a CMPT shelf that have no connected strand, but are part of a trail. Possibly indicates a mid-segment leftover port.", "labels": "SELECT po.* FROM (SELECT p.name port_name, p.port_inst_id, p.network_id, pa.string_value port_hierarchy, eq.name parent_shelf, eq.type AS shelf_type, t.name consuming_trail, t.object_inst_id trail_key, pb2.target_object_id port_connected_object FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'CMPT' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) po WHERE po.port_connected_object IS NULL;"}
{"input_ids": "Report for DWDM remote ports on a shelf that are not associated with a strand or a network interface, but are in a trail. Possibly incomplete config. Return port details, no strand, no NI references.", "labels": "SELECT po.* FROM (SELECT p.name port_name, p.port_inst_id, p.network_id, pa.string_value port_hierarchy, eq.name parent_shelf, eq.type AS shelf_type, t.name consuming_trail, t.object_inst_id trail_key, pb2.target_object_id port_to_strand_id, pb3.target_object_id port_to_ni_id FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_port_b pb3, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND p.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces') po WHERE po.port_to_strand_id IS NULL AND po.port_to_ni_id IS NULL;"}
{"input_ids": "Check for remote NIs that have no ports but are part of a trail via an ICG Link. Possibly leftover or incomplete NI config.", "labels": "SELECT ni.name ni_name, nib.target_object_id ni_asso_ports, t.name trail_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND nib.target_object_id IS NULL AND t.name IS NOT NULL;"}
{"input_ids": "Check for NIs with no ports but the parent trail does have elements. Possibly incomplete NI config. Return NI name, associated ports, trail name, etc.", "labels": "SELECT DISTINCT ni.name ni_name, nib.target_object_id ni_asso_ports, t.name trail_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, occ_trail_b tb WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL AND nib.target_object_id IS NULL AND t.name IS NOT NULL;"}
{"input_ids": "Check if a trail's NI is missing a site association via the ICG Flow Domain. Possibly means the NI is not anchored to any site. Return trail name, NI name, site name if present.", "labels": "SELECT t.name trail_name, ni.name ni_name, s.name site_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oct_infrastructurecg icg1, oct_infrastructurecg_b icgb1, oci_site s WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND nib1.target_object_id = icg1.object_inst_id(+) AND icg1.object_inst_id = icgb1.owning_object_id(+) AND icgb1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND icgb1.target_object_id = s.site_inst_id(+) AND t.name IS NOT NULL ORDER BY t.name, ni.name;"}
{"input_ids": "Check for ICG Links with 0,1 or not exactly 2 NIs. Summarize the NI count for each link usage in trails. Possibly incomplete or overpopulated links.", "labels": "SELECT DISTINCT t.name trail_name, icg.name icg_name, COUNT(ni.name) ni_count FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND t.type = 'INFRA' GROUP BY t.name, icg.name HAVING COUNT(icg.name) <> 2 ORDER BY t.name ASC;"}
{"input_ids": "Check for INFRA trails missing A-side or Z-side site association. Possibly incomplete site references. Return distinct trail object_id, name, A side site, Z side site if any.", "labels": "SELECT DISTINCT t.object_inst_id, t.name trail_name, s.name aSideSite, s1.name zSideSite FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, oci_site s, oci_site s1 WHERE t.type='INFRA' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToASideSite' AND tb1.target_object_id = s.site_inst_id AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToZSideSite' AND tb2.target_object_id = s1.site_inst_id;"}
{"input_ids": "Show INFRA trails that do have at least some path elements, with their scheduled date. Order by last scheduled date descending.", "labels": "SELECT DISTINCT t.object_inst_id, t.name trail_name, t.scheduled_date FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL ORDER BY t.scheduled_date DESC;"}
{"input_ids": "Report for NIs used by a trail, grouped by trail name, showing how many ports each NI has. Possibly highlight where there's only 1 port. Return the group if count of ports is >2 or <2, etc.", "labels": "SELECT DISTINCT t.name trail_name, ni.name ni_name, COUNT(p.name) port_count FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, ni.name ORDER BY t.name ASC;"}
{"input_ids": "Port detail for NIs with exactly 1 port, returning the trail, NI, port details. Possibly indicates an electrical port scenario where we expected pairs.", "labels": "SELECT t1.trail_name, t1.trail_type, t1.trail_bwidth, t1.trail_direction, t1.ni_name, p1.port_inst_id, p1.name AS port_name, p1.band_width AS port_bwidth, p1.connector_type, p1.direction AS port_direction FROM (SELECT DISTINCT t.name trail_name, t.type trail_type, t.band_width trail_bwidth, t.direction trail_direction, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, t.type, t.band_width, t.direction, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+);"}
{"input_ids": "Detailed port report for NIs with exactly 1 port (electrical scenario). Check the rest of the ICG link as well, to see other NIs. Return trail, link, NI, single port, etc.", "labels": "SELECT tbl.trail_name, tbl.trail_type, tbl.trail_bwidth, tbl.icg_link, ni.name ni_name, p.port_inst_id, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT t.name trail_name, t.type trail_type, t.band_width trail_bwidth, icg.object_inst_id icg_link_key, icg.name icg_link, ni.name ni_name, ni.object_inst_id ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, t.type, t.band_width, icg.object_inst_id, icg.name, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) tbl, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tbl.icg_link_key = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "Select all INFRA trails that do have elements, then exclude those that match subselect criteria, so we get all multi-element trails not present in the subselect. Possibly used for upgrade checks.", "labels": "SELECT tr1.* FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL MINUS SELECT DISTINCT t1.trail_key, t1.trail_name FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type AS trail_type, t.band_width trail_bwidth, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+)) tr1 ORDER BY tr1.trail_key ASC;"}
{"input_ids": "Select all INFRA trails with no path elements that do have NI ports. Then group by NI and ensure each NI has 2 ports. Possibly used for partial upgrade checks (the result has 2 ports).", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, ni.name ni_name, ni.object_inst_id ni_id, COUNT(DISTINCT p.port_inst_id) FROM (SELECT DISTINCT tr.object_inst_id, tr.name, tr.type, tr.band_width FROM occ_trail tr, occ_trail_b trb WHERE tr.type='INFRA' AND tr.object_inst_id=trb.owning_object_id(+) AND trb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND trb.binding_name IS NULL) t, oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 2;"}
{"input_ids": "Find ICG Links connected to BN and TN roles but missing routing configs on either side. Possibly need to create routing processes. Return the link and the missing side's routing config if any.", "labels": "SELECT ltab.icg_link, ltab.ni1, rc1.name ni1_rc1, ltab.ni2, rc2.name ni2_rc2, ltab.icg_fd1, ltab.icg_fd1_role, ltab.icg_fd2, ltab.icg_fd2_role FROM (SELECT oi.name icg_link, oni.object_inst_id ni1_id, oni.name ni1, oni1.object_inst_id ni2_id, oni1.name ni2, oi1.name icg_fd1, oi1.role icg_fd1_role, oi2.name icg_fd2, oi2.role icg_fd2_role FROM oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_infrastructureCG_b oib1, oct_networkinterface oni, oct_networkinterface oni1, oct_networkinterface_b onb, oct_networkinterface_b onb1, oct_infrastructureCG oi1, oct_infrastructureCG oi2 WHERE oi.name LIKE 'LNK%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib.target_object_id = oni.object_inst_id(+) AND oni.object_inst_id = onb.owning_object_id(+) AND onb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb.target_object_id = oi1.object_inst_id(+) AND oi1.role = 'BN' AND oi.object_inst_id = oib1.owning_object_id AND oib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib1.target_object_id = oni1.object_inst_id(+) AND oni1.object_inst_id = onb1.owning_object_id(+) AND onb1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb1.target_object_id = oi2.object_inst_id(+) AND oi2.role = 'TN' AND oi1.role IS NOT NULL AND oi2.role IS NOT NULL ORDER BY oi.name ASC) ltab, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_routingconfig rc1, oct_routingconfig rc2 WHERE ltab.ni1_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib1.target_object_id = rc1.object_inst_id(+) AND ltab.ni2_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib2.target_object_id = rc2.object_inst_id(+) AND (rc1.name IS NULL OR rc2.name IS NULL);"}
{"input_ids": "Similar ICG Link check but for BN and TN subroles (TN1, TN2) with matching ISIS processes. Checking if either side lacks a routing config. Return the link, NIs, subroles, routing process ID, etc.", "labels": "SELECT ltab.icg_link, ltab.ni1, rc1.name ni1_rc1, ltab.ni2, rc2.name ni2_rc2, ltab.icg_fd1, ltab.icg_fd1_role, ltab.icg_fd2, ltab.icg_fd2_sub_role, ltab.rp1, ltab.rp1_isis_pid, ltab.rp1_isis_pname, ltab.rp2, ltab.rp2_isis_pid, ltab.rp2_isis_pname FROM (SELECT oi.name icg_link, oni.object_inst_id ni1_id, oni.name ni1, oni1.object_inst_id ni2_id, oni1.name ni2, oi1.name icg_fd1, oi1.role icg_fd1_role, oi2.name icg_fd2, oia.string_value icg_fd2_sub_role, rp.name rp1, rpa1.string_value rp1_isis_pid, rpa2.string_value rp1_isis_pname, _rp.name rp2, _rpa1.string_value rp2_isis_pid, _rpa2.string_value rp2_isis_pname FROM oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_infrastructureCG_b oib1, oct_networkinterface oni, oct_networkinterface oni1, oct_networkinterface_b onb, oct_networkinterface_b onb1, oct_infrastructureCG oi1, oct_infrastructureCG oi2, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) oia, oct_infrastructureCG_b fdicgb, oct_routingconfig rp, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessId' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) rpa1, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessName' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) rpa2, oct_infrastructureCG_b _fdicgb, oct_routingconfig _rp, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessId' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) _rpa1, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessName' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) _rpa2 WHERE oi.name LIKE 'LNK%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib.target_object_id = oni.object_inst_id(+) AND oni.object_inst_id = onb.owning_object_id(+) AND onb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb.target_object_id = oi1.object_inst_id(+) AND oi1.role = 'BN' AND oi1.object_inst_id = fdicgb.owning_object_id(+) AND fdicgb.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND fdicgb.target_object_id = rp.object_inst_id(+) AND rp.object_inst_id = rpa1.owning_object_id(+) AND rp.object_inst_id = rpa2.owning_object_id(+) AND oi.object_inst_id = oib1.owning_object_id AND oib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib1.target_object_id = oni1.object_inst_id(+) AND oni1.object_inst_id = onb1.owning_object_id(+) AND onb1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb1.target_object_id = oi2.object_inst_id(+) AND oi2.object_inst_id = oia.owning_object_id(+) AND oia.string_value IN ('TN1','TN2') AND oi2.object_inst_id = _fdicgb.owning_object_id(+) AND _fdicgb.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND _fdicgb.target_object_id = _rp.object_inst_id(+) AND _rp.object_inst_id = _rpa1.owning_object_id(+) AND _rp.object_inst_id = _rpa2.owning_object_id(+) AND oi1.role IS NOT NULL AND oia.string_value IS NOT NULL AND rpa2.string_value = _rpa2.string_value ORDER BY oi.name ASC) ltab, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_routingconfig rc1, oct_routingconfig rc2 WHERE ltab.ni1_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib1.target_object_id = rc1.object_inst_id(+) AND ltab.ni2_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib2.target_object_id = rc2.object_inst_id(+) AND (rc1.name IS NULL OR rc2.name IS NULL);"}
{"input_ids": "Find subTrail (TxRx and RxTx) references for an INFRA trail (like an upgrade). If subTrail has fewer than 2 end ports on A or Z side, list it. Possibly indicates incomplete subTrail definitions.", "labels": "SELECT DISTINCT ct.object_inst_id ctrail_key, ct.name consuming_trail, icg.name icg_link, COUNT(p.port_inst_id) aEndPortCount, COUNT(p1.port_inst_id) zEndPortCount FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, occ_trail ct, occ_trail_b ctb, oct_infrastructurecg icg, oci_port p, oci_port p1 WHERE t.type='INFRA' AND t.name LIKE '%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToConsumingTrail' AND tb.target_object_id = ct.object_inst_id(+) AND ct.object_inst_id = ctb.owning_object_id(+) AND ctb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND ctb.target_object_id = icg.object_inst_id(+) AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = p.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = p1.port_inst_id(+) GROUP BY ct.object_inst_id, ct.name, icg.name HAVING (COUNT(p.port_inst_id) < 2 OR COUNT(p1.port_inst_id) < 2);"}
{"input_ids": "Detailed subTrail report for incomplete A or Z side end ports, returning ICG link and the ports involved. Possibly indicates subTrail missing a side port.", "labels": "SELECT tbl.ctrail_key, tbl.consuming_trail, tbl.trail_type, tbl.trail_bwidth, tbl.icg_link, tbl.aEndPortCount, tbl.zEndPortCount, ni.name ni_name, p.port_inst_id, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT ct.object_inst_id ctrail_key, ct.name consuming_trail, ct.type trail_type, ct.band_width trail_bwidth, icg.object_inst_id icg_link_id, icg.name icg_link, COUNT(p.port_inst_id) aEndPortCount, COUNT(p1.port_inst_id) zEndPortCount FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, occ_trail ct, occ_trail_b ctb, oct_infrastructurecg icg, oci_port p, oci_port p1 WHERE t.type='INFRA' AND t.name LIKE '%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToConsumingTrail' AND tb.target_object_id = ct.object_inst_id(+) AND ct.object_inst_id = ctb.owning_object_id(+) AND ctb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND ctb.target_object_id = icg.object_inst_id(+) AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = p.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = p1.port_inst_id(+) GROUP BY ct.object_inst_id, ct.name, ct.type, ct.band_width, icg.object_inst_id, icg.name HAVING (COUNT(p.port_inst_id) < 2 OR COUNT(p1.port_inst_id) < 2)) tbl, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tbl.icg_link_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "Select all INFRA trails that do not have subTrails (TrailToTrail with .TxRx/.RxTx). Possibly an upgrade placeholder. Return them if subTrails are missing for both sides.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width, cht1.name txrx_subtrail, cht2.name rxtx_subtrail FROM occ_trail t, occ_trail_b tb1, occ_trail_b tb2, occ_trail cht1, occ_trail cht2 WHERE t.band_width='INFRA' AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb1.target_object_id = cht1.object_inst_id(+) AND cht1.name LIKE '%.TxRx' AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb2.target_object_id = cht2.object_inst_id(+) AND cht2.name LIKE '%.RxTx' AND cht1.name IS NULL AND cht2.name IS NULL;"}
{"input_ids": "Select all INFRA trails not upgraded (no subTrail .TxRx or .RxTx) because they have no NI ports, presumably. Return them sorted by object_id asc.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.name NOT LIKE '%.%x%x' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb.binding_name IS NULL ORDER BY t.object_inst_id ASC;"}
{"input_ids": "Detailed version: INFRA trails not upgraded, plus the ICG link, NIs, and ports data if any. Possibly indicates incomplete port associations preventing subTrail creation.", "labels": "SELECT DISTINCT tr.trail_key, tr.trail_name, tr.trail_type, tr.trail_bwidth, icg.name icg_link, ni.name ni_name, p.port_inst_id port_key, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.name NOT LIKE '%.%x%x' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb.binding_name IS NULL ORDER BY t.object_inst_id ASC) tr, occ_trail_b tb1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tr.trail_key = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "List all electrical trails (where sub-trails exist, but ideally shouldn't). Show the parent trail name, plus .TxRx and .RxTx subtrails. Possibly used to fix them later.", "labels": "SELECT tr.name parentTrail, tr1.name txrxSubTrail, tr2.name rxtxSubTrail FROM occ_trail tr, occ_trail tr1, occ_trail tr2 WHERE tr1.name LIKE CONCAT(tr.name, '%.TxRx') AND tr2.name LIKE CONCAT(tr.name, '%.RxTx') AND tr.object_inst_id IN (SELECT DISTINCT t1.trail_key FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, t.direction trail_direction, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, t.direction, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+) ORDER BY t1.trail_key ASC );"}
{"input_ids": "Fetch shelves (discriminator=PersistedShelf) with NIS ID in the form 'RN_####'. Return the shelf key, name, and strip 'RN_' prefix for the ID.", "labels": "SELECT s.equip_inst_id AS shelf_key, s.name AS shelf_name, LTRIM(s.network_id, 'RN_') AS nis_id FROM oci_equipment s WHERE s.discriminator = 'PersistedShelf' AND s.network_id IS NOT NULL AND s.network_id LIKE 'RN_%';"}
{"input_ids": "Check shelves with NIS ID among a set, e.g. 9146253, 9146254. Return rows matching that suffix of the network_id. Possibly used to confirm certain shelves in the DB.", "labels": "SELECT eq.* FROM (SELECT s.equip_inst_id AS shelf_key, s.name AS shelf_name, LTRIM(s.network_id, 'RN_') AS nis_id FROM oci_equipment s WHERE s.discriminator = 'PersistedShelf' AND s.network_id IS NOT NULL AND s.network_id LIKE 'RN_%') eq WHERE eq.nis_id IN ('9146253', '9146254');"}
{"input_ids": "Find all electrical (bandwidth) ports with no associated NI. Potentially they can be used in single/bundle connectivity plan. Return port, plus ICG Flow Domain if any. Actually, the query is checking t.name IS NULL, meaning no trail. So these are un-trail-connected ports, but they do have a link ICG FD. Possibly for new connections.", "labels": "SELECT p.port_inst_id port_id, p.name port_name, p.band_width port_bwidth, p.direction, ni.object_inst_id ni_id, ni.name ni_name, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, icgl.name icg_link, icgf.name icg_fd FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oci_port p, oci_port_b pb, occ_trail t, oct_infrastructurecg icgf, oct_infrastructurecg icgl WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND nib1.target_object_id = icgf.object_inst_id(+) AND ni.object_inst_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib2.target_object_id = icgl.object_inst_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = t.object_inst_id(+) AND icgl.name IS NOT NULL AND icgf.name IS NOT NULL AND t.name IS NULL AND p.name IS NOT NULL;"}
{"input_ids": "Detailed port-level report for a trail's A and Z side ports, possibly showing if they are missing any network interface. Return the ICG FD role, etc.", "labels": "SELECT tr.trail_key, tr.trail_name, tr.aport_key, tr.aSideEndPort, tr.aSideShelf, tr.aSideShelfType, ni1.name aSidePortNI, icg1.name aSideICGLink, _icg1.name a_icgfd, _icg1.role a_icgfd_role, _icga1.string_value a_icgfd_subrole, tr.zport_key, tr.zSideEndPort, tr.zSideShelf, tr.zSideShelfType, ni2.name zSidePortNI, icg2.name zSideICGLink, _icg2.name z_icgfd, _icg2.role z_icgfd_role, _icga2.string_value z_icgfd_subrole FROM (SELECT t.object_inst_id trail_key, t.name trail_name, aport.port_inst_id aport_key, aport.name aSideEndPort, zport.port_inst_id zport_key, zport.name zSideEndPort, eq1.name aSideShelf, eq1.type aSideShelfType, eq2.name zSideShelf, eq2.type zSideShelfType FROM occ_trail t, occ_trail_b tb1, occ_trail_b tb2, oci_port aport, oci_port zport, oci_port_b pb1, oci_port_b pb2, oci_equipment eq1, oci_equipment eq2 WHERE t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = aport.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = zport.port_inst_id(+) AND aport.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb1.target_object_id = eq1.equip_inst_id(+) AND zport.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb2.target_object_id = eq2.equip_inst_id(+)) tr, oci_port_b _pb1, oci_port_b _pb2, oct_networkinterface ni1, oct_networkinterface ni2, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_infrastructurecg icg1, oct_infrastructurecg icg2, oct_networkinterface_b _nib1, oct_networkinterface_b _nib2, oct_infrastructurecg _icg1, oct_infrastructurecg _icg2, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga1, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga2 WHERE tr.aport_key = _pb1.owning_object_id(+) AND _pb1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces' AND _pb1.target_object_id = ni1.object_inst_id(+) AND tr.zport_key = _pb2.owning_object_id(+) AND _pb2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces' AND _pb2.target_object_id = ni2.object_inst_id(+) AND ni1.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg1.object_inst_id(+) AND ni1.object_inst_id = _nib1.owning_object_id(+) AND _nib1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib1.target_object_id = _icg1.object_inst_id(+) AND _icg1.object_inst_id = _icga1.owning_object_id(+) AND ni2.object_inst_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib2.target_object_id = icg2.object_inst_id(+) AND ni2.object_inst_id = _nib2.owning_object_id(+) AND _nib2.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib2.target_object_id = _icg2.object_inst_id(+) AND _icg2.object_inst_id = _icga2.owning_object_id(+);"}
{"input_ids": "Similar to above but with a simpler approach: For each INFRA trail, show the ICG link, each NI, the NI's ICG FD, and any port. Return them in a single joined set for analysis.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, icg.name icg_link, ni.name ni_name, _icg.name icgfd, _icg.role icgfd_role, _icga.string_value icgfd_ne_role, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b _nib, oct_infrastructurecg _icg, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga, oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, occ_trail ct WHERE t.name NOT LIKE '%.%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+)='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = _nib.owning_object_id(+) AND _nib.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib.target_object_id = _icg.object_inst_id(+) AND _icg.object_inst_id = _icga.owning_object_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+) AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY t.object_inst_id;"}
{"input_ids": "Select all network interfaces (NIs) whose parent ICG (Flow Domain) is associated to a site with site category = 'Network Location'. Potentially used for verifying NI to location relationships.", "labels": "SELECT ni.object_inst_id ni_id, ni.name ni_name, a.object_inst_id icg_id, a.name AS icg_name, a.type AS icg_type, b.target_object_id AS site_inst_id, s.name AS site_name, _s.string_value AS site_category FROM oct_networkInterface ni, oct_networkInterface_b nib, oct_infrastructurecg a, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.target_object_id = a.object_inst_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.type = 'Flow Domain' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites';"}
{"input_ids": "Check for NI objects that contain underscore or slash in the name. Possibly to locate invalid or partial NI naming. Return object_id, name, last_modified info from UAT environment.", "labels": "SELECT object_inst_id, name, last_modified_on, last_modified_by FROM oct_networkinterface WHERE name LIKE '%._/%' ORDER BY object_inst_id DESC;"}
{"input_ids": "Show the same set of NI references from oct_networkinterface_a with the 'interfaceAbbreviation' attribute, for certain object_inst_ids.", "labels": "SELECT ni.object_inst_id, ni.name, ni.last_modified_on, ni.last_modified_by, nia.owning_object_id FROM oct_networkinterface ni, oct_networkinterface_a nia WHERE ni.object_inst_id = nia.owning_object_id(+) AND nia.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'ethernetInterfaceAttributes' AND da.attribute_name='interfaceAbbreviation') AND ni.object_inst_id IN ('167240','161862','161841','150908');"}
{"input_ids": "Check future interface abbreviation attribute from 'FutureRevisionInformation' group for certain NI IDs in UAT environment.", "labels": "SELECT ni.object_inst_id, ni.name, ni.last_modified_on, ni.last_modified_by, nia.owning_object_id FROM oct_networkinterface ni, oct_networkinterface_a nia WHERE ni.object_inst_id = nia.owning_object_id(+) AND nia.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'FutureRevisionInformation' AND da.attribute_name='FutureInterfaceAbbreviation') AND ni.object_inst_id IN ('167240','161862');"}
{"input_ids": "Show all projects in state=COMPLETE_FAILED with linked provisioning requests that are ASSIGN_FAILED, including error details. Ordered by last_modified_on descending.", "labels": "SELECT p.project_inst_id, p.name, p.ext_correlation_id, p.state, p.last_modified_on, o.object_inst_id prov_req_id, o.status prov_status, o.error_details FROM ocp_project p, ocp_project_b pb, ond_provrequest o WHERE p.state = 'COMPLETE_FAILED' AND p.project_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.nd.binding.ProjectToProvisioningRequests' AND pb.target_object_id = o.object_inst_id(+) AND o.status = 'ASSIGN_FAILED' ORDER BY p.last_modified_on DESC;"}
{"input_ids": "Similar check for projects in COMPLETE_FAILED with provisioning requests that are either ASSIGN_FAILED or DESIGN_FAILED. Return project and provisioning details, ordered by last_modified_on descending.", "labels": "SELECT p.project_inst_id, p.name, p.state, p.last_modified_on, o.object_inst_id provrequest_id, o.status provreq_status, o.error_details FROM ocp_project p, ocp_project_b pb, ond_provrequest o WHERE p.state = 'COMPLETE_FAILED' AND p.project_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.nd.binding.ProjectToProvisioningRequests' AND pb.target_object_id = o.object_inst_id(+) AND (o.status = 'ASSIGN_FAILED' OR o.status = 'DESIGN_FAILED') ORDER BY p.last_modified_on DESC;"}
{"input_ids": "Select planbuild service-type provisioning requests, checking time difference from created_on to completed_on, to measure execution duration for requests in a given date range.", "labels": "SELECT object_inst_id, service_type, status, action, transition_type, completed_on, name, created_on, created_by, last_modified_on, EXTRACT(EPOCH FROM completed_on - created_on) AS time_difference_in_seconds, EXTRACT(YEAR FROM completed_on) AS Year FROM ond_provrequest WHERE service_type LIKE 'planbuild:%' AND created_on BETWEEN '2024-04-18 00:00:00.00' AND '2024-04-19 00:00:00.00' ORDER BY created_on DESC;"}
{"input_ids": "List all ICG-FD name, hostnames, role, creation date for roles BN or AN updated in the last 48 hours, including site info if it is a Network Location.", "labels": "SELECT a.object_inst_id AS icg_id, a.name AS icg_name, a.type AS icg_type, a.status AS icg_status, a.role AS icg_role, _a.string_value AS Hostname, _a1.string_value AS NetworkElementRole, a.last_modified_on AS last_modified_on, TO_CHAR(a.last_modified_on, 'DD-MM-YYYY') AS lastModifiedOn, s.name AS associated_site, _s.string_value AS site_category FROM oct_infrastructurecg a, oct_infrastructurecg_a _a, oct_infrastructurecg_a _a1, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE a.type = 'Flow Domain' AND a.object_inst_id = _a.owning_object_id(+) AND a.object_inst_id = _a1.owning_object_id(+) AND a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id(+) AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND _a.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='hostname') AND _a1.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'networkElementDefinition' AND da.attribute_name='role') AND _s.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value='Network Location' AND _a1.string_value(+) IN ('AN','BN') AND a.last_modified_on >= NOW() - INTERVAL '48 HOURS';"}
{"input_ids": "Get current date, current date minus one, now(), now minus one, plus a sample literal date string from dual table (demo).", "labels": "SELECT current_date, current_date - 1 AS cdminus, NOW(), NOW() - 1 AS nowminus, '2021-08-07 12:54:33.738' AS lmd FROM dual;"}
{"input_ids": "Number of trails with more than one distinct ICG name, from a subselect referencing ICG Link NIs and ports, grouped by trail name.", "labels": "SELECT ta.trail_name, COUNT(DISTINCT ta.icg_name) FROM (SELECT DISTINCT t.name trail_name, icg.name icg_name, ni.name ni_name, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM install.occ_trail t, install.occ_trail_b tb, install.oct_infrastructurecg icg, install.oct_infrastructurecg_b icgb, install.oct_networkinterface ni, install.oct_networkinterface_b nib, install.oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, install.oci_port_b pb, install.occ_trail ct WHERE t.type = 'INFRA' AND t.object_inst_id = tb.owning_object_id AND tb.binding_name='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id AND icg.object_inst_id = icgb.owning_object_id AND icgb.binding_name='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id AND ni.object_inst_id = nib.owning_object_id AND nib.binding_name='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY trail_name) ta GROUP BY ta.trail_name HAVING COUNT(DISTINCT ta.icg_name) > 1;"}
{"input_ids": "Select all occ_trail rows where band_width = 'Optical'.", "labels": "SELECT * FROM occ_trail WHERE band_width = 'Optical';"}
{"input_ids": "Show optical trails with associated ports (if any). Return trail name, port name, and more via joins.", "labels": "SELECT t.name trail_name, t.band_width trail_bandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort';"}
{"input_ids": "Identify all optical trails that have no associated port elements.", "labels": "SELECT DISTINCT * FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr WHERE tr.trail_bindingName IS NULL;"}
{"input_ids": "Alternative approach to find all optical trails with no elements (port/pair/strand). Return rows from subselect where binding_name is null.", "labels": "SELECT * FROM (SELECT t.name trail_name, t.band_width trailBandWidth, tb.binding_name AS trail_bindingname FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.band_width = 'Optical' AND (tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort' OR tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToStrand' OR tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPair')) tr WHERE tr.trail_bindingname IS NULL;"}
{"input_ids": "Identify all optical trails that have exactly 2 port trail elements.", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trail_bandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name) = 2;"}
{"input_ids": "Identify all optical trails that have exactly 4 port trail elements.", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name) = 4;"}
{"input_ids": "Find optical trails that have 6 port elements or 1 port element (unusual counts).", "labels": "SELECT tr.trail_name, tr.trail_bandwidth, COUNT(tr.element_port_name) element_port_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, p.name element_port_name, p.direction port_direction, p.band_width port_bandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb, oci_port p WHERE t.object_inst_id = tb.owning_object_id(+) AND tb.target_object_id = p.port_inst_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_name, tr.trail_bandwidth HAVING COUNT(tr.element_port_name)=6 OR COUNT(tr.element_port_name)=1;"}
{"input_ids": "Show all optical trails and the count of their path elements. Summarize by binding name = 'TrailToElementsOfTrail'.", "labels": "SELECT tr.trail_name, COUNT(tr.trail_bindingName) trail_element_count FROM (SELECT t.name trail_name, t.band_width trailBandWidth, tb.binding_name AS trail_bindingName FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.band_width = 'Optical' AND tb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail') tr GROUP BY tr.trail_name, tr.trail_bindingName;"}
{"input_ids": "Fetch ODF ports with status OK, having a strand, but the cable's prewiring = 'YES'. Return port network_id, port hierarchy, etc.", "labels": "SELECT DISTINCT p.network_id AS network_id, pa.string_value AS port_hierarchy, p.status AS port_status, eq.name AS parent_shelf, s.name AS strand_name, c.name AS cable_name, ca.string_value AS cable_prewiring FROM oci_port p, oci_port_a pa, oci_port_b pb, oci_port_b pb1, oci_equipment eq, oci_strand s, oci_strand_b sb, oci_cable c, oci_cable_a ca WHERE p.status = 'OK' AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pa.attribute_definition_id=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalPortInformation' AND da.attribute_name='PortHierarchyInfo') AND pb.binding_name IN ('com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands','com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb1.target_object_id = eq.equip_inst_id(+) AND eq.type = 'ODF' AND pb.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND ca.attribute_definition_id=(SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'AdditionalCableInformation' AND da.attribute_name='PreWiring') AND ca.string_value = 'YES';"}
{"input_ids": "Find all infra trails with zero port elements. Group by trail key, counting the path binding. Having count=0 means no elements found.", "labels": "SELECT tr.trail_key, tr.trail_name, COUNT(tr.element_binding) FROM (SELECT t.object_inst_id AS trail_key, t.name AS trail_name, tb.binding_name AS element_binding FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.type='INFRA' AND t.name NOT LIKE '%.TxRx' AND t.name NOT LIKE '%.RxTx' AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToPort') tr GROUP BY tr.trail_key, tr.trail_name, tr.element_binding HAVING COUNT(tr.element_binding) = 0;"}
{"input_ids": "Fetch all INFRA trails and their element counts (TrailToElementsOfTrail). Useful before running a fix.", "labels": "SELECT tr.trail_key, tr.trail_name, COUNT(tr.element_binding) FROM (SELECT t.object_inst_id AS trail_key, t.name AS trail_name, tb.binding_name AS element_binding FROM occ_trail t, occ_trail_b tb WHERE t.object_inst_id = tb.owning_object_id(+) AND t.type='INFRA' AND t.name NOT LIKE '%.TxRx' AND t.name NOT LIKE '%.RxTx' AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail') tr GROUP BY tr.trail_key, tr.trail_name, tr.element_binding;"}
{"input_ids": "Get all INFRA trails with their ICG Link, NIs, and the count of distinct ports per NI. Group by trail name, ICG, NI, and count the unique port names.", "labels": "SELECT ta.trail_name, ta.icg_name, ta.ni_name, COUNT(DISTINCT ta.port_name) FROM (SELECT DISTINCT t.name trail_name, icg.name icg_name, ni.name ni_name, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM install.occ_trail t, install.occ_trail_b tb, install.oct_infrastructurecg icg, install.oct_infrastructurecg_b icgb, install.oct_networkinterface ni, install.oct_networkinterface_b nib, install.oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, install.oci_port_b pb, install.occ_trail ct WHERE t.type = 'INFRA' AND t.object_inst_id = tb.owning_object_id AND tb.binding_name='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id AND icg.object_inst_id = icgb.owning_object_id AND icgb.binding_name='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id AND ni.object_inst_id = nib.owning_object_id AND nib.binding_name='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY trail_name) ta GROUP BY ta.trail_name, ta.icg_name, ta.ni_name ORDER BY ta.trail_name ASC;"}
{"input_ids": "List all ports with direction=null (no direction set). Return port basic data.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width FROM oci_port p WHERE p.direction IS NULL;"}
{"input_ids": "List all ports with direction=null including port hierarchy attribute. Return port basic data plus hierarchy info.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width, pa.string_value AS port_hierarchy FROM oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL;"}
{"input_ids": "List all ports with direction=null, joined to a parent shelf (if any), specifically ODF shelves. Return port details plus parent shelf name/type.", "labels": "SELECT p.port_inst_id, p.name, p.direction, p.status, p.network_id, p.band_width, pa.string_value AS port_hierarchy, eq.name AS parent_shelf, eq.type AS shelf_type FROM oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'ODF' AND p.network_id IS NULL;"}
{"input_ids": "Report 1: All trails where equipment ports have more than 1 strand terminated. Must not include ODF ports, only real shelf or card equipment. Return the count of unique strands per port for each trail.", "labels": "SELECT po.port_name, po.network_id, po.port_hierarchy, COUNT(DISTINCT po.connected_strandKey) connected_strandKey, po.consuming_trail, po.icg_name, po.ni_name FROM (SELECT p.name port_name, p.network_id, pa.string_value port_hierarchy, pb2.target_object_id connected_strandKey, t.name consuming_trail, icg.name icg_name, ni.name ni_name FROM oci_port p, occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type <> 'ODF' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands')) po GROUP BY po.port_name, po.network_id, po.port_hierarchy, po.consuming_trail, po.icg_name, po.ni_name HAVING COUNT(DISTINCT po.connected_strandKey) > 1;"}
{"input_ids": "Report 2: All ODF ports in trail that have no connected strand. Return only those with direction=null and parent shelf = ODF. The result indicates un-terminated ODF ports in a trail.", "labels": "SELECT * FROM (SELECT t.name AS trail_name, t.object_inst_id AS trail_key, pb2.target_object_id AS connected_strand_key, p.name AS port_name, p.direction, p.port_inst_id AS port_key, p.network_id, p.band_width, pa.string_value AS port_hierarchy, eq.name AS parent_shelf, eq.type AS shelf_type FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.direction IS NULL AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND eq.type = 'ODF' AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands')) po WHERE trail_name IS NOT NULL AND connected_strand_key IS NULL;"}
{"input_ids": "Remote port scenario subscenario 1: BN1 ports with FE cable prewired='YES', check if the trail includes a remote CMPT port that has no further connection. Return the BN1 port/trail pairs where the remote port is unconnected.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, pb4.binding_name remote_port_conn FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1, oci_port_b pb4 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'YES' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT' AND p1.port_inst_id = pb4.owning_object_id(+) AND (pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) tr WHERE tr.remote_port_conn IS NULL;"}
{"input_ids": "Remote port scenario subscenario 2: BN1 ports with FE cable prewired='NO', check if the trail includes a remote CMPT port that has no further connection. Return those BN1 port/trail pairs where remote port is unconnected.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, pb4.binding_name remote_port_conn FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1, oci_port_b pb4 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'NO' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT' AND p1.port_inst_id = pb4.owning_object_id(+) AND (pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb4.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) tr WHERE tr.remote_port_conn IS NULL;"}
{"input_ids": "Remote port scenario subscenario 3: BN1 ports with FE cable prewired='YES' but no remote port at all. Return those BN1 port/trail combos missing any CMPT port side.", "labels": "SELECT DISTINCT tr.* FROM (SELECT p.port_inst_id, p.name port_name, p.network_id, t.object_inst_id trail_key, t.name trail_name, p1.name AS remote_port FROM oci_port p, oci_port_b pb, oci_equipment e, oci_port_b pb1, oci_port_b pb2, oci_strand s, oci_strand_b sb, oci_cable c, occ_trail t, (SELECT * FROM install.oci_cable_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PreWiring' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalCableInformation'))) ca, occ_trail_b tb, oci_port p1, oci_port_b pb3, oci_equipment e1 WHERE p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = e.equip_inst_id(+) AND e.type = 'BN1' AND p.port_inst_id = pb1.owning_object_id(+) AND (pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb1.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND pb1.target_object_id = s.pair_strand_inst_id(+) AND s.pair_strand_inst_id = sb.owning_object_id(+) AND sb.binding_name = 'com.ericsson.granite.oss.core.physical.binding.StrandToParentCable' AND sb.target_object_id = c.cable_inst_id(+) AND c.cable_inst_id = ca.owning_object_id(+) AND UPPER(ca.string_value) = 'YES' AND p.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb2.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name = 'com.ericsson.granite.oss.core.path.binding.TrailToPort' AND tb.target_object_id = p1.port_inst_id(+) AND p1.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb3.target_object_id = e1.equip_inst_id(+) AND e1.type = 'CMPT') tr WHERE tr.remote_port IS NULL;"}
{"input_ids": "Find ports named '%ACCESS%' on a CMPT shelf that is used by a trail. The trail's ICG Link also has an NI named '%ACCESS%', but that NI is not bound to these ports. We want to fix those missing associations so the ACCESS port belongs to the ACCESS NI.", "labels": "SELECT po.port_name, po.network_id, po.port_hierarchy, po.consuming_trail, po.icg_name, po.ni_name, po.ni_to_access_portid FROM (SELECT p.name port_name, p.network_id, pa.string_value port_hierarchy, t.name consuming_trail, icg.name icg_name, ni.name ni_name, nib.target_object_id ni_to_access_portid FROM oci_port p, occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'CMPT' AND p.name LIKE '%ACCESS%' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.name LIKE '%ACCESS%' AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts') po WHERE po.ni_to_access_portid IS NULL;"}
{"input_ids": "Report for DWDM remote ports on a CMPT shelf that have no connected strand, but are part of a trail. Possibly indicates a mid-segment leftover port.", "labels": "SELECT po.* FROM (SELECT p.name port_name, p.port_inst_id, p.network_id, pa.string_value port_hierarchy, eq.name parent_shelf, eq.type AS shelf_type, t.name consuming_trail, t.object_inst_id trail_key, pb2.target_object_id port_connected_object FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND eq.type = 'CMPT' AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands')) po WHERE po.port_connected_object IS NULL;"}
{"input_ids": "Report for DWDM remote ports on a shelf that are not associated with a strand or a network interface, but are in a trail. Possibly incomplete config. Return port details, no strand, no NI references.", "labels": "SELECT po.* FROM (SELECT p.name port_name, p.port_inst_id, p.network_id, pa.string_value port_hierarchy, eq.name parent_shelf, eq.type AS shelf_type, t.name consuming_trail, t.object_inst_id trail_key, pb2.target_object_id port_to_strand_id, pb3.target_object_id port_to_ni_id FROM oci_port p, occ_trail t, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, oci_port_b pb1, oci_port_b pb2, oci_port_b pb3, oci_equipment eq WHERE p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb.target_object_id = eq.equip_inst_id(+) AND p.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb1.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND p.port_inst_id = pb2.owning_object_id(+) AND (pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToASideAbstractPairsStrands' OR pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToZSideAbstractPairsStrands') AND p.port_inst_id = pb3.owning_object_id(+) AND pb3.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces') po WHERE po.port_to_strand_id IS NULL AND po.port_to_ni_id IS NULL;"}
{"input_ids": "Check for remote NIs that have no ports but are part of a trail via an ICG Link. Possibly leftover or incomplete NI config.", "labels": "SELECT ni.name ni_name, nib.target_object_id ni_asso_ports, t.name trail_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND nib.target_object_id IS NULL AND t.name IS NOT NULL;"}
{"input_ids": "Check for NIs with no ports but the parent trail does have elements. Possibly incomplete NI config. Return NI name, associated ports, trail name, etc.", "labels": "SELECT DISTINCT ni.name ni_name, nib.target_object_id ni_asso_ports, t.name trail_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, occ_trail_b tb WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL AND nib.target_object_id IS NULL AND t.name IS NOT NULL;"}
{"input_ids": "Check if a trail's NI is missing a site association via the ICG Flow Domain. Possibly means the NI is not anchored to any site. Return trail name, NI name, site name if present.", "labels": "SELECT t.name trail_name, ni.name ni_name, s.name site_name FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oct_infrastructurecg icg1, oct_infrastructurecg_b icgb1, oci_site s WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND nib1.target_object_id = icg1.object_inst_id(+) AND icg1.object_inst_id = icgb1.owning_object_id(+) AND icgb1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites' AND icgb1.target_object_id = s.site_inst_id(+) AND t.name IS NOT NULL ORDER BY t.name, ni.name;"}
{"input_ids": "Check for ICG Links with 0,1 or not exactly 2 NIs. Summarize the NI count for each link usage in trails. Possibly incomplete or overpopulated links.", "labels": "SELECT DISTINCT t.name trail_name, icg.name icg_name, COUNT(ni.name) ni_count FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND t.name IS NOT NULL AND t.type = 'INFRA' GROUP BY t.name, icg.name HAVING COUNT(icg.name) <> 2 ORDER BY t.name ASC;"}
{"input_ids": "Check for INFRA trails missing A-side or Z-side site association. Possibly incomplete site references. Return distinct trail object_id, name, A side site, Z side site if any.", "labels": "SELECT DISTINCT t.object_inst_id, t.name trail_name, s.name aSideSite, s1.name zSideSite FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, oci_site s, oci_site s1 WHERE t.type='INFRA' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToASideSite' AND tb1.target_object_id = s.site_inst_id AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToZSideSite' AND tb2.target_object_id = s1.site_inst_id;"}
{"input_ids": "Show INFRA trails that do have at least some path elements, with their scheduled date. Order by last scheduled date descending.", "labels": "SELECT DISTINCT t.object_inst_id, t.name trail_name, t.scheduled_date FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL ORDER BY t.scheduled_date DESC;"}
{"input_ids": "Report for NIs used by a trail, grouped by trail name, showing how many ports each NI has. Possibly highlight where there's only 1 port. Return the group if count of ports is >2 or <2, etc.", "labels": "SELECT DISTINCT t.name trail_name, ni.name ni_name, COUNT(p.name) port_count FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, ni.name ORDER BY t.name ASC;"}
{"input_ids": "Port detail for NIs with exactly 1 port, returning the trail, NI, port details. Possibly indicates an electrical port scenario where we expected pairs.", "labels": "SELECT t1.trail_name, t1.trail_type, t1.trail_bwidth, t1.trail_direction, t1.ni_name, p1.port_inst_id, p1.name AS port_name, p1.band_width AS port_bwidth, p1.connector_type, p1.direction AS port_direction FROM (SELECT DISTINCT t.name trail_name, t.type trail_type, t.band_width trail_bwidth, t.direction trail_direction, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, t.type, t.band_width, t.direction, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+);"}
{"input_ids": "Detailed port report for NIs with exactly 1 port (electrical scenario). Check the rest of the ICG link as well, to see other NIs. Return trail, link, NI, single port, etc.", "labels": "SELECT tbl.trail_name, tbl.trail_type, tbl.trail_bwidth, tbl.icg_link, ni.name ni_name, p.port_inst_id, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT t.name trail_name, t.type trail_type, t.band_width trail_bwidth, icg.object_inst_id icg_link_key, icg.name icg_link, ni.name ni_name, ni.object_inst_id ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.name, t.type, t.band_width, icg.object_inst_id, icg.name, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) tbl, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tbl.icg_link_key = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "Select all INFRA trails that do have elements, then exclude those that match subselect criteria, so we get all multi-element trails not present in the subselect. Possibly used for upgrade checks.", "labels": "SELECT tr1.* FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND tb.binding_name IS NOT NULL MINUS SELECT DISTINCT t1.trail_key, t1.trail_name FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type AS trail_type, t.band_width trail_bwidth, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+)) tr1 ORDER BY tr1.trail_key ASC;"}
{"input_ids": "Select all INFRA trails with no path elements that do have NI ports. Then group by NI and ensure each NI has 2 ports. Possibly used for partial upgrade checks (the result has 2 ports).", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, ni.name ni_name, ni.object_inst_id ni_id, COUNT(DISTINCT p.port_inst_id) FROM (SELECT DISTINCT tr.object_inst_id, tr.name, tr.type, tr.band_width FROM occ_trail tr, occ_trail_b trb WHERE tr.type='INFRA' AND tr.object_inst_id=trb.owning_object_id(+) AND trb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToElementsOfTrail' AND trb.binding_name IS NULL) t, oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 2;"}
{"input_ids": "Find ICG Links connected to BN and TN roles but missing routing configs on either side. Possibly need to create routing processes. Return the link and the missing side's routing config if any.", "labels": "SELECT ltab.icg_link, ltab.ni1, rc1.name ni1_rc1, ltab.ni2, rc2.name ni2_rc2, ltab.icg_fd1, ltab.icg_fd1_role, ltab.icg_fd2, ltab.icg_fd2_role FROM (SELECT oi.name icg_link, oni.object_inst_id ni1_id, oni.name ni1, oni1.object_inst_id ni2_id, oni1.name ni2, oi1.name icg_fd1, oi1.role icg_fd1_role, oi2.name icg_fd2, oi2.role icg_fd2_role FROM oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_infrastructureCG_b oib1, oct_networkinterface oni, oct_networkinterface oni1, oct_networkinterface_b onb, oct_networkinterface_b onb1, oct_infrastructureCG oi1, oct_infrastructureCG oi2 WHERE oi.name LIKE 'LNK%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib.target_object_id = oni.object_inst_id(+) AND oni.object_inst_id = onb.owning_object_id(+) AND onb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb.target_object_id = oi1.object_inst_id(+) AND oi1.role = 'BN' AND oi.object_inst_id = oib1.owning_object_id AND oib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib1.target_object_id = oni1.object_inst_id(+) AND oni1.object_inst_id = onb1.owning_object_id(+) AND onb1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb1.target_object_id = oi2.object_inst_id(+) AND oi2.role = 'TN' AND oi1.role IS NOT NULL AND oi2.role IS NOT NULL ORDER BY oi.name ASC) ltab, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_routingconfig rc1, oct_routingconfig rc2 WHERE ltab.ni1_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib1.target_object_id = rc1.object_inst_id(+) AND ltab.ni2_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib2.target_object_id = rc2.object_inst_id(+) AND (rc1.name IS NULL OR rc2.name IS NULL);"}
{"input_ids": "Similar ICG Link check but for BN and TN subroles (TN1, TN2) with matching ISIS processes. Checking if either side lacks a routing config. Return the link, NIs, subroles, routing process ID, etc.", "labels": "SELECT ltab.icg_link, ltab.ni1, rc1.name ni1_rc1, ltab.ni2, rc2.name ni2_rc2, ltab.icg_fd1, ltab.icg_fd1_role, ltab.icg_fd2, ltab.icg_fd2_sub_role, ltab.rp1, ltab.rp1_isis_pid, ltab.rp1_isis_pname, ltab.rp2, ltab.rp2_isis_pid, ltab.rp2_isis_pname FROM (SELECT oi.name icg_link, oni.object_inst_id ni1_id, oni.name ni1, oni1.object_inst_id ni2_id, oni1.name ni2, oi1.name icg_fd1, oi1.role icg_fd1_role, oi2.name icg_fd2, oia.string_value icg_fd2_sub_role, rp.name rp1, rpa1.string_value rp1_isis_pid, rpa2.string_value rp1_isis_pname, _rp.name rp2, _rpa1.string_value rp2_isis_pid, _rpa2.string_value rp2_isis_pname FROM oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_infrastructureCG_b oib1, oct_networkinterface oni, oct_networkinterface oni1, oct_networkinterface_b onb, oct_networkinterface_b onb1, oct_infrastructureCG oi1, oct_infrastructureCG oi2, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) oia, oct_infrastructureCG_b fdicgb, oct_routingconfig rp, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessId' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) rpa1, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessName' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) rpa2, oct_infrastructureCG_b _fdicgb, oct_routingconfig _rp, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessId' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) _rpa1, (SELECT * FROM install.oct_routingconfig_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'ISISProcessName' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='ISISAttributes'))) _rpa2 WHERE oi.name LIKE 'LNK%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib.target_object_id = oni.object_inst_id(+) AND oni.object_inst_id = onb.owning_object_id(+) AND onb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb.target_object_id = oi1.object_inst_id(+) AND oi1.role = 'BN' AND oi1.object_inst_id = fdicgb.owning_object_id(+) AND fdicgb.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND fdicgb.target_object_id = rp.object_inst_id(+) AND rp.object_inst_id = rpa1.owning_object_id(+) AND rp.object_inst_id = rpa2.owning_object_id(+) AND oi.object_inst_id = oib1.owning_object_id AND oib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND oib1.target_object_id = oni1.object_inst_id(+) AND oni1.object_inst_id = onb1.owning_object_id(+) AND onb1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND onb1.target_object_id = oi2.object_inst_id(+) AND oi2.object_inst_id = oia.owning_object_id(+) AND oia.string_value IN ('TN1','TN2') AND oi2.object_inst_id = _fdicgb.owning_object_id(+) AND _fdicgb.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.InfrastructureCGToRoutingProcess' AND _fdicgb.target_object_id = _rp.object_inst_id(+) AND _rp.object_inst_id = _rpa1.owning_object_id(+) AND _rp.object_inst_id = _rpa2.owning_object_id(+) AND oi1.role IS NOT NULL AND oia.string_value IS NOT NULL AND rpa2.string_value = _rpa2.string_value ORDER BY oi.name ASC) ltab, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_routingconfig rc1, oct_routingconfig rc2 WHERE ltab.ni1_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib1.target_object_id = rc1.object_inst_id(+) AND ltab.ni2_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToRoutingConfigurations' AND nib2.target_object_id = rc2.object_inst_id(+) AND (rc1.name IS NULL OR rc2.name IS NULL);"}
{"input_ids": "Find subTrail (TxRx and RxTx) references for an INFRA trail (like an upgrade). If subTrail has fewer than 2 end ports on A or Z side, list it. Possibly indicates incomplete subTrail definitions.", "labels": "SELECT DISTINCT ct.object_inst_id ctrail_key, ct.name consuming_trail, icg.name icg_link, COUNT(p.port_inst_id) aEndPortCount, COUNT(p1.port_inst_id) zEndPortCount FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, occ_trail ct, occ_trail_b ctb, oct_infrastructurecg icg, oci_port p, oci_port p1 WHERE t.type='INFRA' AND t.name LIKE '%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToConsumingTrail' AND tb.target_object_id = ct.object_inst_id(+) AND ct.object_inst_id = ctb.owning_object_id(+) AND ctb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND ctb.target_object_id = icg.object_inst_id(+) AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = p.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = p1.port_inst_id(+) GROUP BY ct.object_inst_id, ct.name, icg.name HAVING (COUNT(p.port_inst_id) < 2 OR COUNT(p1.port_inst_id) < 2);"}
{"input_ids": "Detailed subTrail report for incomplete A or Z side end ports, returning ICG link and the ports involved. Possibly indicates subTrail missing a side port.", "labels": "SELECT tbl.ctrail_key, tbl.consuming_trail, tbl.trail_type, tbl.trail_bwidth, tbl.icg_link, tbl.aEndPortCount, tbl.zEndPortCount, ni.name ni_name, p.port_inst_id, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT ct.object_inst_id ctrail_key, ct.name consuming_trail, ct.type trail_type, ct.band_width trail_bwidth, icg.object_inst_id icg_link_id, icg.name icg_link, COUNT(p.port_inst_id) aEndPortCount, COUNT(p1.port_inst_id) zEndPortCount FROM occ_trail t, occ_trail_b tb, occ_trail_b tb1, occ_trail_b tb2, occ_trail ct, occ_trail_b ctb, oct_infrastructurecg icg, oci_port p, oci_port p1 WHERE t.type='INFRA' AND t.name LIKE '%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToConsumingTrail' AND tb.target_object_id = ct.object_inst_id(+) AND ct.object_inst_id = ctb.owning_object_id(+) AND ctb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND ctb.target_object_id = icg.object_inst_id(+) AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = p.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = p1.port_inst_id(+) GROUP BY ct.object_inst_id, ct.name, ct.type, ct.band_width, icg.object_inst_id, icg.name HAVING (COUNT(p.port_inst_id) < 2 OR COUNT(p1.port_inst_id) < 2)) tbl, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tbl.icg_link_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "Select all INFRA trails that do not have subTrails (TrailToTrail with .TxRx/.RxTx). Possibly an upgrade placeholder. Return them if subTrails are missing for both sides.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width, cht1.name txrx_subtrail, cht2.name rxtx_subtrail FROM occ_trail t, occ_trail_b tb1, occ_trail_b tb2, occ_trail cht1, occ_trail cht2 WHERE t.band_width='INFRA' AND t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb1.target_object_id = cht1.object_inst_id(+) AND cht1.name LIKE '%.TxRx' AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb2.target_object_id = cht2.object_inst_id(+) AND cht2.name LIKE '%.RxTx' AND cht1.name IS NULL AND cht2.name IS NULL;"}
{"input_ids": "Select all INFRA trails not upgraded (no subTrail .TxRx or .RxTx) because they have no NI ports, presumably. Return them sorted by object_id asc.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.name NOT LIKE '%.%x%x' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb.binding_name IS NULL ORDER BY t.object_inst_id ASC;"}
{"input_ids": "Detailed version: INFRA trails not upgraded, plus the ICG link, NIs, and ports data if any. Possibly indicates incomplete port associations preventing subTrail creation.", "labels": "SELECT DISTINCT tr.trail_key, tr.trail_name, tr.trail_type, tr.trail_bwidth, icg.name icg_link, ni.name ni_name, p.port_inst_id port_key, p.name port_name, p.band_width port_bwidth, p.connector_type FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth FROM occ_trail t, occ_trail_b tb WHERE t.type='INFRA' AND t.name NOT LIKE '%.%x%x' AND t.object_inst_id=tb.owning_object_id(+) AND tb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.TrailToTrail' AND tb.binding_name IS NULL ORDER BY t.object_inst_id ASC) tr, occ_trail_b tb1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oci_port p WHERE tr.trail_key = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb1.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+);"}
{"input_ids": "List all electrical trails (where sub-trails exist, but ideally shouldn't). Show the parent trail name, plus .TxRx and .RxTx subtrails. Possibly used to fix them later.", "labels": "SELECT tr.name parentTrail, tr1.name txrxSubTrail, tr2.name rxtxSubTrail FROM occ_trail tr, occ_trail tr1, occ_trail tr2 WHERE tr1.name LIKE CONCAT(tr.name, '%.TxRx') AND tr2.name LIKE CONCAT(tr.name, '%.RxTx') AND tr.object_inst_id IN (SELECT DISTINCT t1.trail_key FROM (SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, t.direction trail_direction, ni.name ni_name, ni.object_inst_id AS ni_id, COUNT(DISTINCT p.port_inst_id) FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, occ_trail t, oci_port p WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+) = 'com.ericsson.granite.oss.core.connassoc.binding.ConnectionGroupToTraversedTrails' AND icgb.target_object_id = t.object_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib1.target_object_id = p.port_inst_id(+) AND t.name IS NOT NULL GROUP BY t.object_inst_id, t.name, t.type, t.band_width, t.direction, ni.name, ni.object_inst_id HAVING COUNT(DISTINCT p.port_inst_id) = 1) t1, oct_networkinterface_b nb, oci_port p1 WHERE t1.ni_id = nb.owning_object_id(+) AND nb.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nb.target_object_id = p1.port_inst_id(+) ORDER BY t1.trail_key ASC );"}
{"input_ids": "Fetch shelves (discriminator=PersistedShelf) with NIS ID in the form 'RN_####'. Return the shelf key, name, and strip 'RN_' prefix for the ID.", "labels": "SELECT s.equip_inst_id AS shelf_key, s.name AS shelf_name, LTRIM(s.network_id, 'RN_') AS nis_id FROM oci_equipment s WHERE s.discriminator = 'PersistedShelf' AND s.network_id IS NOT NULL AND s.network_id LIKE 'RN_%';"}
{"input_ids": "Check shelves with NIS ID among a set, e.g. 9146253, 9146254. Return rows matching that suffix of the network_id. Possibly used to confirm certain shelves in the DB.", "labels": "SELECT eq.* FROM (SELECT s.equip_inst_id AS shelf_key, s.name AS shelf_name, LTRIM(s.network_id, 'RN_') AS nis_id FROM oci_equipment s WHERE s.discriminator = 'PersistedShelf' AND s.network_id IS NOT NULL AND s.network_id LIKE 'RN_%') eq WHERE eq.nis_id IN ('9146253', '9146254');"}
{"input_ids": "Find all electrical (bandwidth) ports with no associated NI. Potentially they can be used in single/bundle connectivity plan. Return port, plus ICG Flow Domain if any. Actually, the query is checking t.name IS NULL, meaning no trail. So these are un-trail-connected ports, but they do have a link ICG FD. Possibly for new connections.", "labels": "SELECT p.port_inst_id port_id, p.name port_name, p.band_width port_bwidth, p.direction, ni.object_inst_id ni_id, ni.name ni_name, t.name trail_name, t.type trail_type, t.band_width trail_bwidth, icgl.name icg_link, icgf.name icg_fd FROM oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oci_port p, oci_port_b pb, occ_trail t, oct_infrastructurecg icgf, oct_infrastructurecg icgl WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+) AND ni.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND nib1.target_object_id = icgf.object_inst_id(+) AND ni.object_inst_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib2.target_object_id = icgl.object_inst_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = t.object_inst_id(+) AND icgl.name IS NOT NULL AND icgf.name IS NOT NULL AND t.name IS NULL AND p.name IS NOT NULL;"}
{"input_ids": "Detailed port-level report for a trail's A and Z side ports, possibly showing if they are missing any network interface. Return the ICG FD role, etc.", "labels": "SELECT tr.trail_key, tr.trail_name, tr.aport_key, tr.aSideEndPort, tr.aSideShelf, tr.aSideShelfType, ni1.name aSidePortNI, icg1.name aSideICGLink, _icg1.name a_icgfd, _icg1.role a_icgfd_role, _icga1.string_value a_icgfd_subrole, tr.zport_key, tr.zSideEndPort, tr.zSideShelf, tr.zSideShelfType, ni2.name zSidePortNI, icg2.name zSideICGLink, _icg2.name z_icgfd, _icg2.role z_icgfd_role, _icga2.string_value z_icgfd_subrole FROM (SELECT t.object_inst_id trail_key, t.name trail_name, aport.port_inst_id aport_key, aport.name aSideEndPort, zport.port_inst_id zport_key, zport.name zSideEndPort, eq1.name aSideShelf, eq1.type aSideShelfType, eq2.name zSideShelf, eq2.type zSideShelfType FROM occ_trail t, occ_trail_b tb1, occ_trail_b tb2, oci_port aport, oci_port zport, oci_port_b pb1, oci_port_b pb2, oci_equipment eq1, oci_equipment eq2 WHERE t.object_inst_id = tb1.owning_object_id(+) AND tb1.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToASideEndPort' AND tb1.target_object_id = aport.port_inst_id(+) AND t.object_inst_id = tb2.owning_object_id(+) AND tb2.binding_name(+) = 'com.ericsson.granite.oss.core.cme.binding.TrailToZSideEndPort' AND tb2.target_object_id = zport.port_inst_id(+) AND aport.port_inst_id = pb1.owning_object_id(+) AND pb1.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb1.target_object_id = eq1.equip_inst_id(+) AND zport.port_inst_id = pb2.owning_object_id(+) AND pb2.binding_name(+) = 'com.ericsson.granite.oss.core.physical.binding.PortToParentShelf' AND pb2.target_object_id = eq2.equip_inst_id(+)) tr, oci_port_b _pb1, oci_port_b _pb2, oct_networkinterface ni1, oct_networkinterface ni2, oct_networkinterface_b nib1, oct_networkinterface_b nib2, oct_infrastructurecg icg1, oct_infrastructurecg icg2, oct_networkinterface_b _nib1, oct_networkinterface_b _nib2, oct_infrastructurecg _icg1, oct_infrastructurecg _icg2, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga1, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga2 WHERE tr.aport_key = _pb1.owning_object_id(+) AND _pb1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces' AND _pb1.target_object_id = ni1.object_inst_id(+) AND tr.zport_key = _pb2.owning_object_id(+) AND _pb2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.PortToNetworkInterfaces' AND _pb2.target_object_id = ni2.object_inst_id(+) AND ni1.object_inst_id = nib1.owning_object_id(+) AND nib1.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib1.target_object_id = icg1.object_inst_id(+) AND ni1.object_inst_id = _nib1.owning_object_id(+) AND _nib1.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib1.target_object_id = _icg1.object_inst_id(+) AND _icg1.object_inst_id = _icga1.owning_object_id(+) AND ni2.object_inst_id = nib2.owning_object_id(+) AND nib2.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToLinkInfrastructureCGs' AND nib2.target_object_id = icg2.object_inst_id(+) AND ni2.object_inst_id = _nib2.owning_object_id(+) AND _nib2.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib2.target_object_id = _icg2.object_inst_id(+) AND _icg2.object_inst_id = _icga2.owning_object_id(+);"}
{"input_ids": "Similar to above but with a simpler approach: For each INFRA trail, show the ICG link, each NI, the NI's ICG FD, and any port. Return them in a single joined set for analysis.", "labels": "SELECT DISTINCT t.object_inst_id trail_key, t.name trail_name, icg.name icg_link, ni.name ni_name, _icg.name icgfd, _icg.role icgfd_role, _icga.string_value icgfd_ne_role, p.name port_name, p.network_id network_id, pa.string_value Port_Hierarchy, ct.name consuming_trail FROM occ_trail t, occ_trail_b tb, oct_infrastructurecg icg, oct_infrastructurecg_b icgb, oct_networkinterface ni, oct_networkinterface_b nib, oct_networkinterface_b _nib, oct_infrastructurecg _icg, (SELECT * FROM install.oct_infrastructureCG_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'role' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='networkElementDefinition'))) _icga, oci_port p, (SELECT * FROM install.oci_port_a WHERE attribute_definition_id IN (SELECT attribute_id FROM install.dyn_attr_definition WHERE attribute_name = 'PortHierarchyInfo' AND group_id IN (SELECT group_id FROM install.dyn_attr_group WHERE group_name='AdditionalPortInformation'))) pa, oci_port_b pb, occ_trail ct WHERE t.name NOT LIKE '%.%x%x' AND t.object_inst_id = tb.owning_object_id(+) AND tb.binding_name(+)='com.ericsson.granite.oss.core.connassoc.binding.TrailToConsumingConnectionGroups' AND tb.target_object_id = icg.object_inst_id(+) AND icg.object_inst_id = icgb.owning_object_id(+) AND icgb.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces' AND icgb.target_object_id = ni.object_inst_id(+) AND ni.object_inst_id = _nib.owning_object_id(+) AND _nib.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND _nib.target_object_id = _icg.object_inst_id(+) AND _icg.object_inst_id = _icga.owning_object_id(+) AND ni.object_inst_id = nib.owning_object_id(+) AND nib.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToPorts' AND nib.target_object_id = p.port_inst_id(+) AND p.port_inst_id = pa.owning_object_id(+) AND p.port_inst_id = pb.owning_object_id(+) AND pb.binding_name(+)='com.ericsson.granite.oss.core.path.binding.PortToConsumingTrail' AND pb.target_object_id = ct.object_inst_id(+) ORDER BY t.object_inst_id;"}
{"input_ids": "Select all network interfaces (NIs) whose parent ICG (Flow Domain) is associated to a site with site category = 'Network Location'. Potentially used for verifying NI to location relationships.", "labels": "SELECT ni.object_inst_id ni_id, ni.name ni_name, a.object_inst_id icg_id, a.name AS icg_name, a.type AS icg_type, b.target_object_id AS site_inst_id, s.name AS site_name, _s.string_value AS site_category FROM oct_networkInterface ni, oct_networkInterface_b nib, oct_infrastructurecg a, oct_infrastructurecg_b b, oci_site s, oci_site_a _s WHERE ni.object_inst_id = nib.owning_object_id(+) AND nib.target_object_id = a.object_inst_id(+) AND nib.binding_name(+) = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs' AND a.object_inst_id = b.owning_object_id(+) AND b.target_object_id = s.site_inst_id(+) AND s.site_inst_id = _s.owning_object_id AND a.type = 'Flow Domain' AND _s.attribute_definition_id = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'Location Info' AND da.attribute_name='Category') AND _s.string_value(+)='Network Location' AND b.binding_name(+)='com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToSites';"}
{"input_ids": "Check for NI objects that contain underscore or slash in the name. Possibly to locate invalid or partial NI naming. Return object_id, name, last_modified info from UAT environment.", "labels": "SELECT object_inst_id, name, last_modified_on, last_modified_by FROM oct_networkinterface WHERE name LIKE '%._/%' ORDER BY object_inst_id DESC;"}
{"input_ids": "Show the same set of NI references from oct_networkinterface_a with the 'interfaceAbbreviation' attribute, for certain object_inst_ids.", "labels": "SELECT ni.object_inst_id, ni.name, ni.last_modified_on, ni.last_modified_by, nia.owning_object_id FROM oct_networkinterface ni, oct_networkinterface_a nia WHERE ni.object_inst_id = nia.owning_object_id(+) AND nia.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'ethernetInterfaceAttributes' AND da.attribute_name='interfaceAbbreviation') AND ni.object_inst_id IN ('167240','161862','161841','150908');"}
{"input_ids": "Check future interface abbreviation attribute from 'FutureRevisionInformation' group for certain NI IDs in UAT environment.", "labels": "SELECT ni.object_inst_id, ni.name, ni.last_modified_on, ni.last_modified_by, nia.owning_object_id FROM oct_networkinterface ni, oct_networkinterface_a nia WHERE ni.object_inst_id = nia.owning_object_id(+) AND nia.attribute_definition_id(+) = (SELECT da.attribute_id FROM dyn_attr_definition da, dyn_attr_group dg WHERE dg.group_id = da.group_id AND dg.group_name = 'FutureRevisionInformation' AND da.attribute_name='FutureInterfaceAbbreviation') AND ni.object_inst_id IN ('167240','161862');"}
{"input_ids": "Show all projects in state=COMPLETE_FAILED with linked provisioning requests that are ASSIGN_FAILED, including error details. Ordered by last_modified_on descending.", "labels": "SELECT p.project_inst_id, p.name, p.ext_correlation_id, p.state, p.last_modified_on, o.object_inst_id prov_req_id, o.status prov_status, o.error_details FROM ocp_project p, ocp_project_b pb, ond_provrequest o WHERE p.state = 'COMPLETE_FAILED' AND p.project_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.nd.binding.ProjectToProvisioningRequests' AND pb.target_object_id = o.object_inst_id(+) AND o.status = 'ASSIGN_FAILED' ORDER BY p.last_modified_on DESC;"}
{"input_ids": "Similar check for projects in COMPLETE_FAILED with provisioning requests that are either ASSIGN_FAILED or DESIGN_FAILED. Return project and provisioning details, ordered by last_modified_on descending.", "labels": "SELECT p.project_inst_id, p.name, p.state, p.last_modified_on, o.object_inst_id provrequest_id, o.status provreq_status, o.error_details FROM ocp_project p, ocp_project_b pb, ond_provrequest o WHERE p.state = 'COMPLETE_FAILED' AND p.project_inst_id = pb.owning_object_id(+) AND pb.binding_name(+) = 'com.ericsson.granite.oss.core.nd.binding.ProjectToProvisioningRequests' AND pb.target_object_id = o.object_inst_id(+) AND (o.status = 'ASSIGN_FAILED' OR o.status = 'DESIGN_FAILED') ORDER BY p.last_modified_on DESC;"}
{"input_ids": "Select planbuild service-type provisioning requests, checking time difference from created_on to completed_on, to measure execution duration for requests in a given date range.", "labels": "SELECT object_inst_id, service_type, status, action, transition_type, completed_on, name, created_on, created_by, last_modified_on, EXTRACT(EPOCH FROM completed_on - created_on) AS time_difference_in_seconds, EXTRACT(YEAR FROM completed_on) AS Year FROM ond_provrequest WHERE service_type LIKE 'planbuild:%' AND created_on BETWEEN '2024-04-18 00:00:00.00' AND '2024-04-19 00:00:00.00' ORDER BY created_on DESC;"}
{"input_ids": "give me the list of infrastructurecg names and servicecg name where infrastructurecg is like 'BDG'", "labels": "SELECT oi.name, os.name FROM oct_infrastructurecg AS oi, oct_infrastructurecg_b AS oib, oct_servicecg AS os WHERE oi.name LIKE '%BDG%' AND oi.object_inst_id = oib.owning_object_id AND oib.binding_name LIKE '%InfrastructureCGToChildServiceCGs' AND oib.target_object_id = os.object_inst_id"}
{"input_ids": "Give me the VPN connection report", "labels": "CREATE OR REPLACE VIEW public.vpn_connection_details AS SELECT DISTINCT vpn.name AS ipvpn_name, vpn.service_definition, vpn.status AS ipvpn_status, vpnscon.name AS vpnscgcon_name, li.name AS liname, li.ce_vlan_id, ip.name AS ip, ipr.ip_range_start, ipr.ip_range_cidr_mask, ni.name AS ni_name FROM install.oct_ipvpn vpn LEFT JOIN install.oct_ipvpn_b vpnb ON vpn.object_inst_id = vpnb.owning_object_id AND vpnb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.IPVPNToServiceCGs'::text LEFT JOIN install.oct_servicecg vpnscon ON vpnb.target_object_id = vpnscon.object_inst_id LEFT JOIN install.oct_servicecg_b scgcli ON vpnscon.object_inst_id = scgcli.owning_object_id AND scgcli.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.ServiceCGToConnectionLogicalInterfaces'::text LEFT JOIN install.oct_logicalinterface li ON scgcli.target_object_id = li.object_inst_id LEFT JOIN install.oct_logicalinterface_b liip ON li.object_inst_id = liip.owning_object_id AND liip.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.ManagedObjectToAssignedIPAddress'::text LEFT JOIN install.ipm_ipaddress ip ON liip.target_object_id = ip.object_inst_id LEFT JOIN install.ipm_ipaddress_b ipb ON ip.object_inst_id = ipb.owning_object_id AND ipb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text LEFT JOIN install.ipm_iprange ipr ON ipb.target_object_id = ipr.object_inst_id LEFT JOIN install.oct_logicalinterface_b lini ON li.object_inst_id = lini.owning_object_id AND lini.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.LogicalInterfaceToNetworkInterfaces'::text LEFT JOIN install.oct_networkinterface ni ON lini.target_object_id = ni.object_inst_id WHERE vpnscon.type::text = 'Connection'::text;"}
{"input_ids": "Give me report of AN to RAN", "labels": "SELECT t1.ne_name AS an_name, t1.hostname AS an_hostname, t2.ne_name AS radio_node_name, t2.hostname AS radio_node_hostname, t1.link_status, t1.ni_name AS ni_name_a, t1.ni_speed AS bw_of_ni_a, t2.ni_name AS ni_name_z, t2.ni_speed AS bw_of_ni_z, t1.mplscloud AS mpls_ring_name FROM ( SELECT es.link_name, es.ne_name, es.hostname, es.link_status, es.ni_name, es.ni_speed, es.mplscloud FROM element_link_details es WHERE es.ne_role::text = 'AN'::text) t1, ( SELECT es.link_name, es.ne_name, es.hostname, es.link_status, es.ni_name, es.ni_speed, es.mplscloud FROM element_link_details es WHERE es.ne_role::text = ANY (ARRAY['RAN'::character varying, 'BBU'::character varying]::text[])) t2 WHERE t1.link_name::text = t2.link_name::text;"}
{"input_ids": "Give me the element link details", "labels": "SELECT DISTINCT lnk.object_inst_id AS link_id, lnk.name AS link_name, lnk.role AS link_role, lnk.status AS link_status, lnk.in_service_date AS link_inservice_date, lnk.scheduled_date AS link_scheduled_date, to_char(nvl(lnk.in_service_date::timestamp with time zone, lnk.scheduled_date::timestamp with time zone), 'MON-YYYY'::text) AS month_year, 'ni'::text || row_number() OVER (PARTITION BY lnk.object_inst_id, lnk.name, lnk.role, lnk.status, lnk.in_service_date, lnk.scheduled_date)::text AS ni_number, ni.name AS ni_name, ni.type AS ni_type, ni.sub_type AS ni_sub_type, ni.speed AS ni_speed, ip.name AS ip, ipr.ip_range_start, ipr.ip_range_cidr_mask, fd.name AS ne_name, nehn.string_value AS hostname, fd.role AS ne_role, mc.name AS mplscloud, pmc.name AS parent_mplscloud FROM oct_infrastructurecg lnk CROSS JOIN oct_infrastructurecg_b lnkb CROSS JOIN oct_networkinterface ni LEFT JOIN oct_networkinterface_b niip ON ni.object_inst_id = niip.owning_object_id AND niip.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.ManagedObjectToAssignedIPAddress'::text LEFT JOIN ipm_ipaddress ip ON niip.target_object_id = ip.object_inst_id LEFT JOIN ipm_ipaddress_b ipb ON ip.object_inst_id = ipb.owning_object_id AND ipb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text LEFT JOIN ipm_iprange ipr ON ipb.target_object_id = ipr.object_inst_id LEFT JOIN oct_networkinterface_b nib ON ni.object_inst_id = nib.owning_object_id AND nib.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.NetworkInterfaceToFlowDomainInfrastructureCGs'::text LEFT JOIN oct_infrastructurecg fd ON nib.target_object_id = fd.object_inst_id LEFT JOIN oct_infrastructurecg_a nehn ON fd.object_inst_id = nehn.owning_object_id AND nehn.attribute_definition_id = (( SELECT dyn_attr_definition.attribute_id FROM dyn_attr_definition WHERE dyn_attr_definition.group_id = (( SELECT dyn_attr_group.group_id FROM dyn_attr_group WHERE dyn_attr_group.group_name::text = 'networkElementDefinition'::text)) AND dyn_attr_definition.attribute_name::text = 'hostname'::text)) LEFT JOIN oct_infrastructurecg_b neb ON fd.object_inst_id = neb.owning_object_id AND neb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToMplsCloud'::text LEFT JOIN oct_mplscloud mc ON neb.target_object_id = mc.object_inst_id LEFT JOIN oct_mplscloud_b mcb ON mc.object_inst_id = mcb.owning_object_id AND mcb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.MPLSCloudToParentMplsCloud'::text LEFT JOIN oct_mplscloud pmc ON mcb.target_object_id = pmc.object_inst_id WHERE lnk.type::text = 'Link'::text AND (lnk.role::text = ANY (ARRAY['Bundle'::character varying, 'Singleton'::character varying]::text[])) AND lnk.object_inst_id = lnkb.owning_object_id AND lnkb.binding_name::text = 'com.ericsson.granite.oss.core.transmission.binding.InfrastructureCGToLinkNetworkInterfaces'::text AND lnkb.target_object_id = ni.object_inst_id;"}
{"input_ids": "give me the names of ICGS and their loopback interfaces and logical interfaces which are at site 'L.2001'", "labels": "select oi.name, oni.name, oni.type, os.name from oct_infrastructureCG oi, oct_infrastructureCG_b oib, oct_networkinterface oni ,oct_infrastructureCG_b oib1, oci_site os where oi.name like '%AMS36267-SEN1-2%' and oni.type = 'Loopback' and oi.object_inst_id = oib.owning_object_id and oib.binding_name = '%InfrastructureCGToFlowDomainNetworkInterfaces%' and oib.target_object_id = oni.object_inst_id and oi.object_inst_id = oib1.owning_object_id and oib1.binding_name = '%InfrastructureCGToSites%' and oib1.target_object_id = os.site_inst_id and os.name like '%36267%'"}
{"input_ids": "Give me list of ICGs", "labels": "WITH infrastructure_cg_data AS ( SELECT 'object_inst_id', 'name' FROM 'eaiuser_oct_infrastructurecg' ) SELECT name FROM infrastructure_cg_data"}
{"input_ids": "give me list of hostnames of all network interfaces", "labels": "SELECT hostname FROM eaiuser_oct_networkinterface"}
{"input_ids": "Find ICGs linked to SCGs (Service Configuration Groups)", "labels": "SELECT icg.*, scg.* FROM eaiuser.oct_infrastructurecg icg JOIN eaiuser.oct_infrastructurecg_b icg_b ON icg.object_inst_id = icg_b.owning_object_id JOIN eaiuser.oct_servicecg scg ON icg_b.target_object_id = scg.object_inst_id WHERE icg_b.binding_name LIKE '%InfrastructureCGToChildServiceCGs%';"}
{"input_ids": "Find ICGs linked to VRFs", "labels": "SELECT icg.*, vrf.* FROM eaiuser.oct_infrastructurecg icg JOIN eaiuser.oct_infrastructurecg_b icg_b ON icg.object_inst_id = icg_b.owning_object_id JOIN eaiuser.oct_vrf vrf ON icg_b.target_object_id = vrf.object_inst_id WHERE icg_b.binding_name LIKE '%InfrastructureCGToVrfs%';"}
{"input_ids": "Get me duplicate ipaddress report", "labels": "SELECT tbl2.ip_id, tbl2.ip_address AS ipadress, tbl2.ip_status AS ipstatus, tbl2.ipnetwork_name AS ipnetwork, tbl2.project_name AS project, tbl2.project_status AS projectstaus, tbl2.due_date AS duedate, tbl2.last_modified_on AS lastmodifiedon, tbl2.wo_name AS workorder, tbl2.user_name AS userid, tbl2.full_name AS fullname, tbl2.email_address AS emailaddress FROM ( SELECT tabl2.ip_id, tabl2.ip_address, tabl2.ipnetwork_name, tabl2.ip_status, tabl2.project_name, tabl2.project_status, tabl2.due_date, tabl2.last_modified_on, tabl2.wo_name, tabl2.user_name, us.full_name, us.email_address FROM ( SELECT tbl1.ip_id, tbl1.ip_address, tbl1.ipnetwork_name, tbl1.ip_status, op.name AS project_name, op.state AS project_status, op.due_date, op.last_modified_on, ow.name AS wo_name, ot.user_name FROM ( SELECT ia1.object_inst_id AS ip_id, tbl.ip_address, tbl.ipnetwork_name, ia1.status AS ip_status FROM ( SELECT tabl.ip AS ip_address, tabl.ipnetwork_name FROM ( SELECT iia.name AS ip, iir.ip_range_start AS iprange_start, iir.ip_range_end AS iprange_end, iir.ip_range_cidr_mask AS cidr_mask, ii.name AS ipnetwork_name, count(iia.name) AS ip_count FROM ipm_ipaddress iia CROSS JOIN ipm_ipaddress_b iib CROSS JOIN ipm_iprange_b iirb LEFT JOIN ipm_iprange iir ON iib.target_object_id = iir.object_inst_id LEFT JOIN ipm_ipnetwork ii ON iirb.target_object_id = ii.object_inst_id WHERE iia.object_inst_id = iib.owning_object_id AND iib.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPAddressToIpRange'::text AND iir.object_inst_id = iirb.owning_object_id AND iirb.binding_name::text = 'com.ericsson.granite.oss.core.ipam.binding.IPRangeToIpNetwork'::text GROUP BY iia.name, iir.ip_range_start, iir.ip_range_end, iir.ip_range_cidr_mask, ii.name HAVING count(iia.name) > 1) tabl) tbl, ipm_ipaddress ia1 WHERE tbl.ip_address::text = ia1.name::text) tbl1 CROSS JOIN ipm_ipaddress_b iib1 CROSS JOIN ocp_project_b opb CROSS JOIN octm_workorder_b owb LEFT JOIN ocp_project op ON iib1.target_object_id = op.project_inst_id LEFT JOIN octm_workorder ow ON opb.target_object_id = ow.wo_inst_id LEFT JOIN octm_task ot ON owb.target_object_id = ot.task_inst_id WHERE tbl1.ip_id = iib1.owning_object_id AND iib1.binding_name::text = 'com.ericsson.granite.oss.core.projectmanagement.binding.ManagedObjectToProject'::text AND op.project_inst_id = opb.owning_object_id AND opb.binding_name::text = 'com.ericsson.granite.oss.core.cme.binding.ProjectToWorkOrder'::text AND ow.wo_inst_id = owb.owning_object_id AND owb.binding_name::text = 'com.ericsson.granite.oss.core.taskmanagement.binding.WorkOrderToTasks'::text AND ot.task_name::text ~~ 'Enter%'::text) tabl2, platform.users us WHERE tabl2.user_name::text = us.name::text) tbl2;"}